
ComunicacaoSerialUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08004b70  08004b70  00014b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f8c  08004f8c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004f8c  08004f8c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f8c  08004f8c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  200001dc  08005170  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005170  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000535c  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013de  00000000  00000000  00025561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  00026940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00026ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769e  00000000  00000000  00027628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ebb  00000000  00000000  0003ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833fb  00000000  00000000  00045b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8f7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a74  00000000  00000000  000c8fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b58 	.word	0x08004b58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004b58 	.word	0x08004b58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int __io_putchar(int ch){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8000a90:	1d39      	adds	r1, r7, #4
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	2201      	movs	r2, #1
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <__io_putchar+0x20>)
 8000a98:	f001 f99b 	bl	8001dd2 <HAL_UART_Transmit>
	return ch;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001f8 	.word	0x200001f8

08000aac <main>:

int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fa39 	bl	8000f28 <HAL_Init>


  SystemClock_Config();
 8000ab6:	f000 f827 	bl	8000b08 <SystemClock_Config>


  MX_GPIO_Init();
 8000aba:	f000 f88b 	bl	8000bd4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000abe:	f000 f85f 	bl	8000b80 <MX_USART1_UART_Init>
  int i=0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  char str[5] = "yone";
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <main+0x50>)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ace:	6018      	str	r0, [r3, #0]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	7019      	strb	r1, [r3, #0]
  float w =0.8;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <main+0x54>)
 8000ad6:	60bb      	str	r3, [r7, #8]


  while (1)
  {
	  //printf("ben vienido gamba\n");
	  printf("i=%d %s w=%.2f\n",i,str,w);
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f7ff fca5 	bl	8000428 <__aeabi_f2d>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	4639      	mov	r1, r7
 8000ae4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ae8:	460a      	mov	r2, r1
 8000aea:	68f9      	ldr	r1, [r7, #12]
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <main+0x58>)
 8000aee:	f001 ff6d 	bl	80029cc <iprintf>
	  HAL_Delay(1000);
 8000af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af6:	f000 fa79 	bl	8000fec <HAL_Delay>
	  printf("i=%d %s w=%.2f\n",i,str,w);
 8000afa:	e7ed      	b.n	8000ad8 <main+0x2c>
 8000afc:	08004b80 	.word	0x08004b80
 8000b00:	3f4ccccd 	.word	0x3f4ccccd
 8000b04:	08004b70 	.word	0x08004b70

08000b08 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2228      	movs	r2, #40	; 0x28
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 faf0 	bl	80020fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b32:	2310      	movs	r3, #16
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fce0 	bl	8001504 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f865 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 ff4e 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b72:	f000 f851 	bl	8000c18 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	; 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0


  huart1.Instance = USART1;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <MX_USART1_UART_Init+0x50>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f001 f8be 	bl	8001d38 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f000 f829 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001f8 	.word	0x200001f8
 8000bd0:	40013800 	.word	0x40013800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_GPIO_Init+0x40>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <MX_GPIO_Init+0x40>)
 8000be0:	f043 0320 	orr.w	r3, r3, #32
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_GPIO_Init+0x40>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0320 	and.w	r3, r3, #32
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_GPIO_Init+0x40>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <MX_GPIO_Init+0x40>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <MX_GPIO_Init+0x40>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000

08000c18 <Error_Handler>:


void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_MspInit+0x40>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_MspInit+0x40>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6193      	str	r3, [r2, #24]
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_MspInit+0x40>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_MspInit+0x40>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_MspInit+0x40>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_MspInit+0x40>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d131      	bne.n	8000cec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000cce:	f000 fa95 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000ce8:	f000 fa88 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f935 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
	return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <_kill>:

int _kill(int pid, int sig)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d66:	f001 f99f 	bl	80020a8 <__errno>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2216      	movs	r2, #22
 8000d6e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_exit>:

void _exit (int status)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ffe7 	bl	8000d5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d8e:	e7fe      	b.n	8000d8e <_exit+0x12>

08000d90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da2:	f3af 8000 	nop.w
 8000da6:	4601      	mov	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
	}

return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e009      	b.n	8000df0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe4f 	bl	8000a88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf1      	blt.n	8000ddc <_write+0x12>
	}
	return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:

int _close(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e28:	605a      	str	r2, [r3, #4]
	return 0;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
	return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f001 f908 	bl	80020a8 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20005000 	.word	0x20005000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	2000023c 	.word	0x2000023c
 8000ecc:	20000258 	.word	0x20000258

08000ed0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff ffe5 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f001 f8d5 	bl	80020b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0a:	f7ff fdcf 	bl	8000aac <main>
  bx lr
 8000f0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000f18:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 8000f1c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000f20:	20000254 	.word	0x20000254

08000f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_2_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x28>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x28>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f92b 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fe6e 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f935 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f90b 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000240 	.word	0x20000240

08000fd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000240 	.word	0x20000240

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fff0 	bl	8000fd8 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffe0 	bl	8000fd8 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	; 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff90 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff49 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff5e 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff90 	bl	80010ec <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5f 	bl	8001098 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffb0 	bl	8001150 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b08b      	sub	sp, #44	; 0x2c
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e169      	b.n	80014e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001210:	2201      	movs	r2, #1
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8158 	bne.w	80014de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a9a      	ldr	r2, [pc, #616]	; (800149c <HAL_GPIO_Init+0x2a0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d05e      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001238:	4a98      	ldr	r2, [pc, #608]	; (800149c <HAL_GPIO_Init+0x2a0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d875      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800123e:	4a98      	ldr	r2, [pc, #608]	; (80014a0 <HAL_GPIO_Init+0x2a4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d058      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001244:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <HAL_GPIO_Init+0x2a4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d86f      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800124a:	4a96      	ldr	r2, [pc, #600]	; (80014a4 <HAL_GPIO_Init+0x2a8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d052      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001250:	4a94      	ldr	r2, [pc, #592]	; (80014a4 <HAL_GPIO_Init+0x2a8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d869      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001256:	4a94      	ldr	r2, [pc, #592]	; (80014a8 <HAL_GPIO_Init+0x2ac>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d04c      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 800125c:	4a92      	ldr	r2, [pc, #584]	; (80014a8 <HAL_GPIO_Init+0x2ac>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d863      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001262:	4a92      	ldr	r2, [pc, #584]	; (80014ac <HAL_GPIO_Init+0x2b0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d046      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001268:	4a90      	ldr	r2, [pc, #576]	; (80014ac <HAL_GPIO_Init+0x2b0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d85d      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d82a      	bhi.n	80012c8 <HAL_GPIO_Init+0xcc>
 8001272:	2b12      	cmp	r3, #18
 8001274:	d859      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <HAL_GPIO_Init+0x80>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012f7 	.word	0x080012f7
 8001280:	080012d1 	.word	0x080012d1
 8001284:	080012e3 	.word	0x080012e3
 8001288:	08001325 	.word	0x08001325
 800128c:	0800132b 	.word	0x0800132b
 8001290:	0800132b 	.word	0x0800132b
 8001294:	0800132b 	.word	0x0800132b
 8001298:	0800132b 	.word	0x0800132b
 800129c:	0800132b 	.word	0x0800132b
 80012a0:	0800132b 	.word	0x0800132b
 80012a4:	0800132b 	.word	0x0800132b
 80012a8:	0800132b 	.word	0x0800132b
 80012ac:	0800132b 	.word	0x0800132b
 80012b0:	0800132b 	.word	0x0800132b
 80012b4:	0800132b 	.word	0x0800132b
 80012b8:	0800132b 	.word	0x0800132b
 80012bc:	0800132b 	.word	0x0800132b
 80012c0:	080012d9 	.word	0x080012d9
 80012c4:	080012ed 	.word	0x080012ed
 80012c8:	4a79      	ldr	r2, [pc, #484]	; (80014b0 <HAL_GPIO_Init+0x2b4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ce:	e02c      	b.n	800132a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e029      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	3304      	adds	r3, #4
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e024      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	3308      	adds	r3, #8
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e01f      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	330c      	adds	r3, #12
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e01a      	b.n	800132c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fe:	2304      	movs	r3, #4
 8001300:	623b      	str	r3, [r7, #32]
          break;
 8001302:	e013      	b.n	800132c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800130c:	2308      	movs	r3, #8
 800130e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	611a      	str	r2, [r3, #16]
          break;
 8001316:	e009      	b.n	800132c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	615a      	str	r2, [r3, #20]
          break;
 8001322:	e003      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x130>
          break;
 800132a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2bff      	cmp	r3, #255	; 0xff
 8001330:	d801      	bhi.n	8001336 <HAL_GPIO_Init+0x13a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	e001      	b.n	800133a <HAL_GPIO_Init+0x13e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d802      	bhi.n	8001348 <HAL_GPIO_Init+0x14c>
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x152>
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	3b08      	subs	r3, #8
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	210f      	movs	r1, #15
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	6a39      	ldr	r1, [r7, #32]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80b1 	beq.w	80014de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x2b8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x2b8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_GPIO_Init+0x2b8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001394:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <HAL_GPIO_Init+0x2bc>)
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a40      	ldr	r2, [pc, #256]	; (80014bc <HAL_GPIO_Init+0x2c0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1ec>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <HAL_GPIO_Init+0x2c4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1e8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a3e      	ldr	r2, [pc, #248]	; (80014c4 <HAL_GPIO_Init+0x2c8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3d      	ldr	r2, [pc, #244]	; (80014c8 <HAL_GPIO_Init+0x2cc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1e0>
 80013d8:	2303      	movs	r3, #3
 80013da:	e006      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013dc:	2304      	movs	r3, #4
 80013de:	e004      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e8:	2300      	movs	r3, #0
 80013ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4093      	lsls	r3, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fa:	492f      	ldr	r1, [pc, #188]	; (80014b8 <HAL_GPIO_Init+0x2bc>)
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	492c      	ldr	r1, [pc, #176]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	4928      	ldr	r1, [pc, #160]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4922      	ldr	r1, [pc, #136]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	491e      	ldr	r1, [pc, #120]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	4918      	ldr	r1, [pc, #96]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4914      	ldr	r1, [pc, #80]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800147c:	4013      	ands	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d021      	beq.n	80014d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	490e      	ldr	r1, [pc, #56]	; (80014cc <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
 8001498:	e021      	b.n	80014de <HAL_GPIO_Init+0x2e2>
 800149a:	bf00      	nop
 800149c:	10320000 	.word	0x10320000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10220000 	.word	0x10220000
 80014a8:	10210000 	.word	0x10210000
 80014ac:	10120000 	.word	0x10120000
 80014b0:	10110000 	.word	0x10110000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40011400 	.word	0x40011400
 80014cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_GPIO_Init+0x304>)
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	4909      	ldr	r1, [pc, #36]	; (8001500 <HAL_GPIO_Init+0x304>)
 80014da:	4013      	ands	r3, r2
 80014dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	3301      	adds	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f47f ae8e 	bne.w	8001210 <HAL_GPIO_Init+0x14>
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	372c      	adds	r7, #44	; 0x2c
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e272      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	4b92      	ldr	r3, [pc, #584]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001530:	4b8f      	ldr	r3, [pc, #572]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
 800153c:	4b8c      	ldr	r3, [pc, #560]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e24c      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x76>
 800156c:	4b80      	ldr	r3, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7a      	ldr	r2, [pc, #488]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xbc>
 80015a6:	4b72      	ldr	r3, [pc, #456]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a71      	ldr	r2, [pc, #452]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6e      	ldr	r2, [pc, #440]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 80015c0:	4b6b      	ldr	r3, [pc, #428]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b68      	ldr	r3, [pc, #416]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a67      	ldr	r2, [pc, #412]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fcfa 	bl	8000fd8 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fcf6 	bl	8000fd8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e200      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe4>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fce6 	bl	8000fd8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fce2 	bl	8000fd8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ec      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x10c>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163e:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164a:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
 8001656:	4b46      	ldr	r3, [pc, #280]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1c0      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4939      	ldr	r1, [pc, #228]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fc9b 	bl	8000fd8 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc97 	bl	8000fd8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1a1      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4927      	ldr	r1, [pc, #156]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x270>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc7a 	bl	8000fd8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fc76 	bl	8000fd8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e180      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fc5a 	bl	8000fd8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fc56 	bl	8000fd8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e160      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x26c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fad8 	bl	8001cfc <RCC_Delay>
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_OscConfig+0x274>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fc40 	bl	8000fd8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fc3c 	bl	8000fd8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d908      	bls.n	800177c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e146      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420000 	.word	0x42420000
 8001778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e9      	bne.n	800175c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a6 	beq.w	80018e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a87      	ldr	r2, [pc, #540]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b82      	ldr	r3, [pc, #520]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7e      	ldr	r2, [pc, #504]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff fbfd 	bl	8000fd8 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fbf9 	bl	8000fd8 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e103      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b75      	ldr	r3, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x312>
 8001808:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e02d      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x334>
 800181e:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a69      	ldr	r2, [pc, #420]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a66      	ldr	r2, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	e01c      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x356>
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a60      	ldr	r2, [pc, #384]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a5d      	ldr	r2, [pc, #372]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a5a      	ldr	r2, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fbad 	bl	8000fd8 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff fba9 	bl	8000fd8 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0b1      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCC_OscConfig+0x37e>
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb97 	bl	8000fd8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fb93 	bl	8000fd8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e09b      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d061      	beq.n	80019bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d146      	bne.n	800198e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fb67 	bl	8000fd8 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fb63 	bl	8000fd8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e06d      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d108      	bne.n	8001948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4921      	ldr	r1, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a19      	ldr	r1, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	430b      	orrs	r3, r1
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fb37 	bl	8000fd8 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fb33 	bl	8000fd8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e03d      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x46a>
 800198c:	e035      	b.n	80019fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb20 	bl	8000fd8 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fb1c 	bl	8000fd8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e026      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x498>
 80019ba:	e01e      	b.n	80019fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e019      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x500>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d0      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4965      	ldr	r1, [pc, #404]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d040      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e073      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4936      	ldr	r1, [pc, #216]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa6e 	bl	8000fd8 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff fa6a 	bl	8000fd8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e053      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d210      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f9cc 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004b98 	.word	0x08004b98
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b490      	push	{r4, r7}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xac>)
 8001be4:	1d3c      	adds	r4, r7, #4
 8001be6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bec:	f240 2301 	movw	r3, #513	; 0x201
 8001bf0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x40>
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x46>
 8001c1a:	e02b      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	e02b      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	3328      	adds	r3, #40	; 0x28
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c32:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0c5b      	lsrs	r3, r3, #17
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	3328      	adds	r3, #40	; 0x28
 8001c4a:	443b      	add	r3, r7
 8001c4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c56:	fb03 f202 	mul.w	r2, r3, r2
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
 8001c62:	e004      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	623b      	str	r3, [r7, #32]
      break;
 8001c72:	e002      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c76:	623b      	str	r3, [r7, #32]
      break;
 8001c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc90      	pop	{r4, r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	08004b88 	.word	0x08004b88
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	003d0900 	.word	0x003d0900

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff2 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08004ba8 	.word	0x08004ba8

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08004ba8 	.word	0x08004ba8

08001cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <RCC_Delay+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <RCC_Delay+0x38>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d18:	bf00      	nop
  }
  while (Delay --);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <RCC_Delay+0x1c>
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000000 	.word	0x20000000
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e03f      	b.n	8001dca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe ff82 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f905 	bl	8001f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b08a      	sub	sp, #40	; 0x28
 8001dd6:	af02      	add	r7, sp, #8
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d17c      	bne.n	8001eec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_UART_Transmit+0x2c>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e075      	b.n	8001eee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_UART_Transmit+0x3e>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e06e      	b.n	8001eee <HAL_UART_Transmit+0x11c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2221      	movs	r2, #33	; 0x21
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e26:	f7ff f8d7 	bl	8000fd8 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e40:	d108      	bne.n	8001e54 <HAL_UART_Transmit+0x82>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	e003      	b.n	8001e5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e64:	e02a      	b.n	8001ebc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f840 	bl	8001ef6 <UART_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e036      	b.n	8001eee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10b      	bne.n	8001e9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e007      	b.n	8001eae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1cf      	bne.n	8001e66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f810 	bl	8001ef6 <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e006      	b.n	8001eee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f06:	e02c      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d028      	beq.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f16:	f7ff f85f 	bl	8000fd8 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d21d      	bcs.n	8001f62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e00f      	b.n	8001f82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d0c3      	beq.n	8001f08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fc6:	f023 030c 	bic.w	r3, r3, #12
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <UART_SetConfig+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ff4:	f7ff fe6e 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	e002      	b.n	8002002 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ffc:	f7ff fe56 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002000:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009a      	lsls	r2, r3, #2
 800200c:	441a      	add	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <UART_SetConfig+0x118>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	0119      	lsls	r1, r3, #4
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	009a      	lsls	r2, r3, #2
 800202c:	441a      	add	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fbb2 f2f3 	udiv	r2, r2, r3
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <UART_SetConfig+0x118>)
 800203a:	fba3 0302 	umull	r0, r3, r3, r2
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2064      	movs	r0, #100	; 0x64
 8002042:	fb00 f303 	mul.w	r3, r0, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	3332      	adds	r3, #50	; 0x32
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <UART_SetConfig+0x118>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002058:	4419      	add	r1, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009a      	lsls	r2, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <UART_SetConfig+0x118>)
 8002072:	fba3 0302 	umull	r0, r3, r3, r2
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2064      	movs	r0, #100	; 0x64
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	3332      	adds	r3, #50	; 0x32
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <UART_SetConfig+0x118>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	f003 020f 	and.w	r2, r3, #15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	440a      	add	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40013800 	.word	0x40013800
 80020a4:	51eb851f 	.word	0x51eb851f

080020a8 <__errno>:
 80020a8:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <__errno+0x8>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000000c 	.word	0x2000000c

080020b4 <__libc_init_array>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	2600      	movs	r6, #0
 80020b8:	4d0c      	ldr	r5, [pc, #48]	; (80020ec <__libc_init_array+0x38>)
 80020ba:	4c0d      	ldr	r4, [pc, #52]	; (80020f0 <__libc_init_array+0x3c>)
 80020bc:	1b64      	subs	r4, r4, r5
 80020be:	10a4      	asrs	r4, r4, #2
 80020c0:	42a6      	cmp	r6, r4
 80020c2:	d109      	bne.n	80020d8 <__libc_init_array+0x24>
 80020c4:	f002 fd48 	bl	8004b58 <_init>
 80020c8:	2600      	movs	r6, #0
 80020ca:	4d0a      	ldr	r5, [pc, #40]	; (80020f4 <__libc_init_array+0x40>)
 80020cc:	4c0a      	ldr	r4, [pc, #40]	; (80020f8 <__libc_init_array+0x44>)
 80020ce:	1b64      	subs	r4, r4, r5
 80020d0:	10a4      	asrs	r4, r4, #2
 80020d2:	42a6      	cmp	r6, r4
 80020d4:	d105      	bne.n	80020e2 <__libc_init_array+0x2e>
 80020d6:	bd70      	pop	{r4, r5, r6, pc}
 80020d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020dc:	4798      	blx	r3
 80020de:	3601      	adds	r6, #1
 80020e0:	e7ee      	b.n	80020c0 <__libc_init_array+0xc>
 80020e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e6:	4798      	blx	r3
 80020e8:	3601      	adds	r6, #1
 80020ea:	e7f2      	b.n	80020d2 <__libc_init_array+0x1e>
 80020ec:	08004f8c 	.word	0x08004f8c
 80020f0:	08004f8c 	.word	0x08004f8c
 80020f4:	08004f8c 	.word	0x08004f8c
 80020f8:	08004f90 	.word	0x08004f90

080020fc <memset>:
 80020fc:	4603      	mov	r3, r0
 80020fe:	4402      	add	r2, r0
 8002100:	4293      	cmp	r3, r2
 8002102:	d100      	bne.n	8002106 <memset+0xa>
 8002104:	4770      	bx	lr
 8002106:	f803 1b01 	strb.w	r1, [r3], #1
 800210a:	e7f9      	b.n	8002100 <memset+0x4>

0800210c <__cvt>:
 800210c:	2b00      	cmp	r3, #0
 800210e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002112:	461f      	mov	r7, r3
 8002114:	bfbb      	ittet	lt
 8002116:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800211a:	461f      	movlt	r7, r3
 800211c:	2300      	movge	r3, #0
 800211e:	232d      	movlt	r3, #45	; 0x2d
 8002120:	b088      	sub	sp, #32
 8002122:	4614      	mov	r4, r2
 8002124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002126:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002128:	7013      	strb	r3, [r2, #0]
 800212a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800212c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002130:	f023 0820 	bic.w	r8, r3, #32
 8002134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002138:	d005      	beq.n	8002146 <__cvt+0x3a>
 800213a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800213e:	d100      	bne.n	8002142 <__cvt+0x36>
 8002140:	3501      	adds	r5, #1
 8002142:	2302      	movs	r3, #2
 8002144:	e000      	b.n	8002148 <__cvt+0x3c>
 8002146:	2303      	movs	r3, #3
 8002148:	aa07      	add	r2, sp, #28
 800214a:	9204      	str	r2, [sp, #16]
 800214c:	aa06      	add	r2, sp, #24
 800214e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002152:	e9cd 3500 	strd	r3, r5, [sp]
 8002156:	4622      	mov	r2, r4
 8002158:	463b      	mov	r3, r7
 800215a:	f000 fcdd 	bl	8002b18 <_dtoa_r>
 800215e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002162:	4606      	mov	r6, r0
 8002164:	d102      	bne.n	800216c <__cvt+0x60>
 8002166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002168:	07db      	lsls	r3, r3, #31
 800216a:	d522      	bpl.n	80021b2 <__cvt+0xa6>
 800216c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002170:	eb06 0905 	add.w	r9, r6, r5
 8002174:	d110      	bne.n	8002198 <__cvt+0x8c>
 8002176:	7833      	ldrb	r3, [r6, #0]
 8002178:	2b30      	cmp	r3, #48	; 0x30
 800217a:	d10a      	bne.n	8002192 <__cvt+0x86>
 800217c:	2200      	movs	r2, #0
 800217e:	2300      	movs	r3, #0
 8002180:	4620      	mov	r0, r4
 8002182:	4639      	mov	r1, r7
 8002184:	f7fe fc10 	bl	80009a8 <__aeabi_dcmpeq>
 8002188:	b918      	cbnz	r0, 8002192 <__cvt+0x86>
 800218a:	f1c5 0501 	rsb	r5, r5, #1
 800218e:	f8ca 5000 	str.w	r5, [sl]
 8002192:	f8da 3000 	ldr.w	r3, [sl]
 8002196:	4499      	add	r9, r3
 8002198:	2200      	movs	r2, #0
 800219a:	2300      	movs	r3, #0
 800219c:	4620      	mov	r0, r4
 800219e:	4639      	mov	r1, r7
 80021a0:	f7fe fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80021a4:	b108      	cbz	r0, 80021aa <__cvt+0x9e>
 80021a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80021aa:	2230      	movs	r2, #48	; 0x30
 80021ac:	9b07      	ldr	r3, [sp, #28]
 80021ae:	454b      	cmp	r3, r9
 80021b0:	d307      	bcc.n	80021c2 <__cvt+0xb6>
 80021b2:	4630      	mov	r0, r6
 80021b4:	9b07      	ldr	r3, [sp, #28]
 80021b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80021b8:	1b9b      	subs	r3, r3, r6
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	b008      	add	sp, #32
 80021be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	9107      	str	r1, [sp, #28]
 80021c6:	701a      	strb	r2, [r3, #0]
 80021c8:	e7f0      	b.n	80021ac <__cvt+0xa0>

080021ca <__exponent>:
 80021ca:	4603      	mov	r3, r0
 80021cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ce:	2900      	cmp	r1, #0
 80021d0:	f803 2b02 	strb.w	r2, [r3], #2
 80021d4:	bfb6      	itet	lt
 80021d6:	222d      	movlt	r2, #45	; 0x2d
 80021d8:	222b      	movge	r2, #43	; 0x2b
 80021da:	4249      	neglt	r1, r1
 80021dc:	2909      	cmp	r1, #9
 80021de:	7042      	strb	r2, [r0, #1]
 80021e0:	dd2b      	ble.n	800223a <__exponent+0x70>
 80021e2:	f10d 0407 	add.w	r4, sp, #7
 80021e6:	46a4      	mov	ip, r4
 80021e8:	270a      	movs	r7, #10
 80021ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80021ee:	460a      	mov	r2, r1
 80021f0:	46a6      	mov	lr, r4
 80021f2:	fb07 1516 	mls	r5, r7, r6, r1
 80021f6:	2a63      	cmp	r2, #99	; 0x63
 80021f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80021fc:	4631      	mov	r1, r6
 80021fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8002202:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002206:	dcf0      	bgt.n	80021ea <__exponent+0x20>
 8002208:	3130      	adds	r1, #48	; 0x30
 800220a:	f1ae 0502 	sub.w	r5, lr, #2
 800220e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002212:	4629      	mov	r1, r5
 8002214:	1c44      	adds	r4, r0, #1
 8002216:	4561      	cmp	r1, ip
 8002218:	d30a      	bcc.n	8002230 <__exponent+0x66>
 800221a:	f10d 0209 	add.w	r2, sp, #9
 800221e:	eba2 020e 	sub.w	r2, r2, lr
 8002222:	4565      	cmp	r5, ip
 8002224:	bf88      	it	hi
 8002226:	2200      	movhi	r2, #0
 8002228:	4413      	add	r3, r2
 800222a:	1a18      	subs	r0, r3, r0
 800222c:	b003      	add	sp, #12
 800222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002230:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002234:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002238:	e7ed      	b.n	8002216 <__exponent+0x4c>
 800223a:	2330      	movs	r3, #48	; 0x30
 800223c:	3130      	adds	r1, #48	; 0x30
 800223e:	7083      	strb	r3, [r0, #2]
 8002240:	70c1      	strb	r1, [r0, #3]
 8002242:	1d03      	adds	r3, r0, #4
 8002244:	e7f1      	b.n	800222a <__exponent+0x60>
	...

08002248 <_printf_float>:
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	b091      	sub	sp, #68	; 0x44
 800224e:	460c      	mov	r4, r1
 8002250:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002254:	4616      	mov	r6, r2
 8002256:	461f      	mov	r7, r3
 8002258:	4605      	mov	r5, r0
 800225a:	f001 fb41 	bl	80038e0 <_localeconv_r>
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	9309      	str	r3, [sp, #36]	; 0x24
 8002264:	f7fd ff74 	bl	8000150 <strlen>
 8002268:	2300      	movs	r3, #0
 800226a:	930e      	str	r3, [sp, #56]	; 0x38
 800226c:	f8d8 3000 	ldr.w	r3, [r8]
 8002270:	900a      	str	r0, [sp, #40]	; 0x28
 8002272:	3307      	adds	r3, #7
 8002274:	f023 0307 	bic.w	r3, r3, #7
 8002278:	f103 0208 	add.w	r2, r3, #8
 800227c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002280:	f8d4 b000 	ldr.w	fp, [r4]
 8002284:	f8c8 2000 	str.w	r2, [r8]
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002290:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002294:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002298:	930b      	str	r3, [sp, #44]	; 0x2c
 800229a:	f04f 32ff 	mov.w	r2, #4294967295
 800229e:	4640      	mov	r0, r8
 80022a0:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <_printf_float+0x2cc>)
 80022a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022a4:	f7fe fbb2 	bl	8000a0c <__aeabi_dcmpun>
 80022a8:	bb70      	cbnz	r0, 8002308 <_printf_float+0xc0>
 80022aa:	f04f 32ff 	mov.w	r2, #4294967295
 80022ae:	4640      	mov	r0, r8
 80022b0:	4b98      	ldr	r3, [pc, #608]	; (8002514 <_printf_float+0x2cc>)
 80022b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022b4:	f7fe fb8c 	bl	80009d0 <__aeabi_dcmple>
 80022b8:	bb30      	cbnz	r0, 8002308 <_printf_float+0xc0>
 80022ba:	2200      	movs	r2, #0
 80022bc:	2300      	movs	r3, #0
 80022be:	4640      	mov	r0, r8
 80022c0:	4651      	mov	r1, sl
 80022c2:	f7fe fb7b 	bl	80009bc <__aeabi_dcmplt>
 80022c6:	b110      	cbz	r0, 80022ce <_printf_float+0x86>
 80022c8:	232d      	movs	r3, #45	; 0x2d
 80022ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ce:	4b92      	ldr	r3, [pc, #584]	; (8002518 <_printf_float+0x2d0>)
 80022d0:	4892      	ldr	r0, [pc, #584]	; (800251c <_printf_float+0x2d4>)
 80022d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80022d6:	bf94      	ite	ls
 80022d8:	4698      	movls	r8, r3
 80022da:	4680      	movhi	r8, r0
 80022dc:	2303      	movs	r3, #3
 80022de:	f04f 0a00 	mov.w	sl, #0
 80022e2:	6123      	str	r3, [r4, #16]
 80022e4:	f02b 0304 	bic.w	r3, fp, #4
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	4633      	mov	r3, r6
 80022ec:	4621      	mov	r1, r4
 80022ee:	4628      	mov	r0, r5
 80022f0:	9700      	str	r7, [sp, #0]
 80022f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80022f4:	f000 f9d4 	bl	80026a0 <_printf_common>
 80022f8:	3001      	adds	r0, #1
 80022fa:	f040 8090 	bne.w	800241e <_printf_float+0x1d6>
 80022fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002302:	b011      	add	sp, #68	; 0x44
 8002304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002308:	4642      	mov	r2, r8
 800230a:	4653      	mov	r3, sl
 800230c:	4640      	mov	r0, r8
 800230e:	4651      	mov	r1, sl
 8002310:	f7fe fb7c 	bl	8000a0c <__aeabi_dcmpun>
 8002314:	b148      	cbz	r0, 800232a <_printf_float+0xe2>
 8002316:	f1ba 0f00 	cmp.w	sl, #0
 800231a:	bfb8      	it	lt
 800231c:	232d      	movlt	r3, #45	; 0x2d
 800231e:	4880      	ldr	r0, [pc, #512]	; (8002520 <_printf_float+0x2d8>)
 8002320:	bfb8      	it	lt
 8002322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <_printf_float+0x2dc>)
 8002328:	e7d3      	b.n	80022d2 <_printf_float+0x8a>
 800232a:	6863      	ldr	r3, [r4, #4]
 800232c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	d142      	bne.n	80023ba <_printf_float+0x172>
 8002334:	2306      	movs	r3, #6
 8002336:	6063      	str	r3, [r4, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	9206      	str	r2, [sp, #24]
 800233c:	aa0e      	add	r2, sp, #56	; 0x38
 800233e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002342:	aa0d      	add	r2, sp, #52	; 0x34
 8002344:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002348:	9203      	str	r2, [sp, #12]
 800234a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800234e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	6863      	ldr	r3, [r4, #4]
 8002356:	4642      	mov	r2, r8
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4628      	mov	r0, r5
 800235c:	4653      	mov	r3, sl
 800235e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002360:	f7ff fed4 	bl	800210c <__cvt>
 8002364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002366:	4680      	mov	r8, r0
 8002368:	2947      	cmp	r1, #71	; 0x47
 800236a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800236c:	d108      	bne.n	8002380 <_printf_float+0x138>
 800236e:	1cc8      	adds	r0, r1, #3
 8002370:	db02      	blt.n	8002378 <_printf_float+0x130>
 8002372:	6863      	ldr	r3, [r4, #4]
 8002374:	4299      	cmp	r1, r3
 8002376:	dd40      	ble.n	80023fa <_printf_float+0x1b2>
 8002378:	f1a9 0902 	sub.w	r9, r9, #2
 800237c:	fa5f f989 	uxtb.w	r9, r9
 8002380:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002384:	d81f      	bhi.n	80023c6 <_printf_float+0x17e>
 8002386:	464a      	mov	r2, r9
 8002388:	3901      	subs	r1, #1
 800238a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800238e:	910d      	str	r1, [sp, #52]	; 0x34
 8002390:	f7ff ff1b 	bl	80021ca <__exponent>
 8002394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002396:	4682      	mov	sl, r0
 8002398:	1813      	adds	r3, r2, r0
 800239a:	2a01      	cmp	r2, #1
 800239c:	6123      	str	r3, [r4, #16]
 800239e:	dc02      	bgt.n	80023a6 <_printf_float+0x15e>
 80023a0:	6822      	ldr	r2, [r4, #0]
 80023a2:	07d2      	lsls	r2, r2, #31
 80023a4:	d501      	bpl.n	80023aa <_printf_float+0x162>
 80023a6:	3301      	adds	r3, #1
 80023a8:	6123      	str	r3, [r4, #16]
 80023aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d09b      	beq.n	80022ea <_printf_float+0xa2>
 80023b2:	232d      	movs	r3, #45	; 0x2d
 80023b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023b8:	e797      	b.n	80022ea <_printf_float+0xa2>
 80023ba:	2947      	cmp	r1, #71	; 0x47
 80023bc:	d1bc      	bne.n	8002338 <_printf_float+0xf0>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ba      	bne.n	8002338 <_printf_float+0xf0>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e7b7      	b.n	8002336 <_printf_float+0xee>
 80023c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80023ca:	d118      	bne.n	80023fe <_printf_float+0x1b6>
 80023cc:	2900      	cmp	r1, #0
 80023ce:	6863      	ldr	r3, [r4, #4]
 80023d0:	dd0b      	ble.n	80023ea <_printf_float+0x1a2>
 80023d2:	6121      	str	r1, [r4, #16]
 80023d4:	b913      	cbnz	r3, 80023dc <_printf_float+0x194>
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	07d0      	lsls	r0, r2, #31
 80023da:	d502      	bpl.n	80023e2 <_printf_float+0x19a>
 80023dc:	3301      	adds	r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	6123      	str	r3, [r4, #16]
 80023e2:	f04f 0a00 	mov.w	sl, #0
 80023e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80023e8:	e7df      	b.n	80023aa <_printf_float+0x162>
 80023ea:	b913      	cbnz	r3, 80023f2 <_printf_float+0x1aa>
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	07d2      	lsls	r2, r2, #31
 80023f0:	d501      	bpl.n	80023f6 <_printf_float+0x1ae>
 80023f2:	3302      	adds	r3, #2
 80023f4:	e7f4      	b.n	80023e0 <_printf_float+0x198>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e7f2      	b.n	80023e0 <_printf_float+0x198>
 80023fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80023fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002400:	4299      	cmp	r1, r3
 8002402:	db05      	blt.n	8002410 <_printf_float+0x1c8>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	6121      	str	r1, [r4, #16]
 8002408:	07d8      	lsls	r0, r3, #31
 800240a:	d5ea      	bpl.n	80023e2 <_printf_float+0x19a>
 800240c:	1c4b      	adds	r3, r1, #1
 800240e:	e7e7      	b.n	80023e0 <_printf_float+0x198>
 8002410:	2900      	cmp	r1, #0
 8002412:	bfcc      	ite	gt
 8002414:	2201      	movgt	r2, #1
 8002416:	f1c1 0202 	rsble	r2, r1, #2
 800241a:	4413      	add	r3, r2
 800241c:	e7e0      	b.n	80023e0 <_printf_float+0x198>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	055a      	lsls	r2, r3, #21
 8002422:	d407      	bmi.n	8002434 <_printf_float+0x1ec>
 8002424:	6923      	ldr	r3, [r4, #16]
 8002426:	4642      	mov	r2, r8
 8002428:	4631      	mov	r1, r6
 800242a:	4628      	mov	r0, r5
 800242c:	47b8      	blx	r7
 800242e:	3001      	adds	r0, #1
 8002430:	d12b      	bne.n	800248a <_printf_float+0x242>
 8002432:	e764      	b.n	80022fe <_printf_float+0xb6>
 8002434:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002438:	f240 80dd 	bls.w	80025f6 <_printf_float+0x3ae>
 800243c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002440:	2200      	movs	r2, #0
 8002442:	2300      	movs	r3, #0
 8002444:	f7fe fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8002448:	2800      	cmp	r0, #0
 800244a:	d033      	beq.n	80024b4 <_printf_float+0x26c>
 800244c:	2301      	movs	r3, #1
 800244e:	4631      	mov	r1, r6
 8002450:	4628      	mov	r0, r5
 8002452:	4a35      	ldr	r2, [pc, #212]	; (8002528 <_printf_float+0x2e0>)
 8002454:	47b8      	blx	r7
 8002456:	3001      	adds	r0, #1
 8002458:	f43f af51 	beq.w	80022fe <_printf_float+0xb6>
 800245c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002460:	429a      	cmp	r2, r3
 8002462:	db02      	blt.n	800246a <_printf_float+0x222>
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	07d8      	lsls	r0, r3, #31
 8002468:	d50f      	bpl.n	800248a <_printf_float+0x242>
 800246a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800246e:	4631      	mov	r1, r6
 8002470:	4628      	mov	r0, r5
 8002472:	47b8      	blx	r7
 8002474:	3001      	adds	r0, #1
 8002476:	f43f af42 	beq.w	80022fe <_printf_float+0xb6>
 800247a:	f04f 0800 	mov.w	r8, #0
 800247e:	f104 091a 	add.w	r9, r4, #26
 8002482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002484:	3b01      	subs	r3, #1
 8002486:	4543      	cmp	r3, r8
 8002488:	dc09      	bgt.n	800249e <_printf_float+0x256>
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	079b      	lsls	r3, r3, #30
 800248e:	f100 8102 	bmi.w	8002696 <_printf_float+0x44e>
 8002492:	68e0      	ldr	r0, [r4, #12]
 8002494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002496:	4298      	cmp	r0, r3
 8002498:	bfb8      	it	lt
 800249a:	4618      	movlt	r0, r3
 800249c:	e731      	b.n	8002302 <_printf_float+0xba>
 800249e:	2301      	movs	r3, #1
 80024a0:	464a      	mov	r2, r9
 80024a2:	4631      	mov	r1, r6
 80024a4:	4628      	mov	r0, r5
 80024a6:	47b8      	blx	r7
 80024a8:	3001      	adds	r0, #1
 80024aa:	f43f af28 	beq.w	80022fe <_printf_float+0xb6>
 80024ae:	f108 0801 	add.w	r8, r8, #1
 80024b2:	e7e6      	b.n	8002482 <_printf_float+0x23a>
 80024b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	dc38      	bgt.n	800252c <_printf_float+0x2e4>
 80024ba:	2301      	movs	r3, #1
 80024bc:	4631      	mov	r1, r6
 80024be:	4628      	mov	r0, r5
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <_printf_float+0x2e0>)
 80024c2:	47b8      	blx	r7
 80024c4:	3001      	adds	r0, #1
 80024c6:	f43f af1a 	beq.w	80022fe <_printf_float+0xb6>
 80024ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80024ce:	4313      	orrs	r3, r2
 80024d0:	d102      	bne.n	80024d8 <_printf_float+0x290>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	07d9      	lsls	r1, r3, #31
 80024d6:	d5d8      	bpl.n	800248a <_printf_float+0x242>
 80024d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024dc:	4631      	mov	r1, r6
 80024de:	4628      	mov	r0, r5
 80024e0:	47b8      	blx	r7
 80024e2:	3001      	adds	r0, #1
 80024e4:	f43f af0b 	beq.w	80022fe <_printf_float+0xb6>
 80024e8:	f04f 0900 	mov.w	r9, #0
 80024ec:	f104 0a1a 	add.w	sl, r4, #26
 80024f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024f2:	425b      	negs	r3, r3
 80024f4:	454b      	cmp	r3, r9
 80024f6:	dc01      	bgt.n	80024fc <_printf_float+0x2b4>
 80024f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024fa:	e794      	b.n	8002426 <_printf_float+0x1de>
 80024fc:	2301      	movs	r3, #1
 80024fe:	4652      	mov	r2, sl
 8002500:	4631      	mov	r1, r6
 8002502:	4628      	mov	r0, r5
 8002504:	47b8      	blx	r7
 8002506:	3001      	adds	r0, #1
 8002508:	f43f aef9 	beq.w	80022fe <_printf_float+0xb6>
 800250c:	f109 0901 	add.w	r9, r9, #1
 8002510:	e7ee      	b.n	80024f0 <_printf_float+0x2a8>
 8002512:	bf00      	nop
 8002514:	7fefffff 	.word	0x7fefffff
 8002518:	08004bb4 	.word	0x08004bb4
 800251c:	08004bb8 	.word	0x08004bb8
 8002520:	08004bc0 	.word	0x08004bc0
 8002524:	08004bbc 	.word	0x08004bbc
 8002528:	08004bc4 	.word	0x08004bc4
 800252c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800252e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002530:	429a      	cmp	r2, r3
 8002532:	bfa8      	it	ge
 8002534:	461a      	movge	r2, r3
 8002536:	2a00      	cmp	r2, #0
 8002538:	4691      	mov	r9, r2
 800253a:	dc37      	bgt.n	80025ac <_printf_float+0x364>
 800253c:	f04f 0b00 	mov.w	fp, #0
 8002540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002544:	f104 021a 	add.w	r2, r4, #26
 8002548:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800254c:	ebaa 0309 	sub.w	r3, sl, r9
 8002550:	455b      	cmp	r3, fp
 8002552:	dc33      	bgt.n	80025bc <_printf_float+0x374>
 8002554:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002558:	429a      	cmp	r2, r3
 800255a:	db3b      	blt.n	80025d4 <_printf_float+0x38c>
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	07da      	lsls	r2, r3, #31
 8002560:	d438      	bmi.n	80025d4 <_printf_float+0x38c>
 8002562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002566:	eba3 020a 	sub.w	r2, r3, sl
 800256a:	eba3 0901 	sub.w	r9, r3, r1
 800256e:	4591      	cmp	r9, r2
 8002570:	bfa8      	it	ge
 8002572:	4691      	movge	r9, r2
 8002574:	f1b9 0f00 	cmp.w	r9, #0
 8002578:	dc34      	bgt.n	80025e4 <_printf_float+0x39c>
 800257a:	f04f 0800 	mov.w	r8, #0
 800257e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002582:	f104 0a1a 	add.w	sl, r4, #26
 8002586:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	eba3 0309 	sub.w	r3, r3, r9
 8002590:	4543      	cmp	r3, r8
 8002592:	f77f af7a 	ble.w	800248a <_printf_float+0x242>
 8002596:	2301      	movs	r3, #1
 8002598:	4652      	mov	r2, sl
 800259a:	4631      	mov	r1, r6
 800259c:	4628      	mov	r0, r5
 800259e:	47b8      	blx	r7
 80025a0:	3001      	adds	r0, #1
 80025a2:	f43f aeac 	beq.w	80022fe <_printf_float+0xb6>
 80025a6:	f108 0801 	add.w	r8, r8, #1
 80025aa:	e7ec      	b.n	8002586 <_printf_float+0x33e>
 80025ac:	4613      	mov	r3, r2
 80025ae:	4631      	mov	r1, r6
 80025b0:	4642      	mov	r2, r8
 80025b2:	4628      	mov	r0, r5
 80025b4:	47b8      	blx	r7
 80025b6:	3001      	adds	r0, #1
 80025b8:	d1c0      	bne.n	800253c <_printf_float+0x2f4>
 80025ba:	e6a0      	b.n	80022fe <_printf_float+0xb6>
 80025bc:	2301      	movs	r3, #1
 80025be:	4631      	mov	r1, r6
 80025c0:	4628      	mov	r0, r5
 80025c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80025c4:	47b8      	blx	r7
 80025c6:	3001      	adds	r0, #1
 80025c8:	f43f ae99 	beq.w	80022fe <_printf_float+0xb6>
 80025cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80025ce:	f10b 0b01 	add.w	fp, fp, #1
 80025d2:	e7b9      	b.n	8002548 <_printf_float+0x300>
 80025d4:	4631      	mov	r1, r6
 80025d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025da:	4628      	mov	r0, r5
 80025dc:	47b8      	blx	r7
 80025de:	3001      	adds	r0, #1
 80025e0:	d1bf      	bne.n	8002562 <_printf_float+0x31a>
 80025e2:	e68c      	b.n	80022fe <_printf_float+0xb6>
 80025e4:	464b      	mov	r3, r9
 80025e6:	4631      	mov	r1, r6
 80025e8:	4628      	mov	r0, r5
 80025ea:	eb08 020a 	add.w	r2, r8, sl
 80025ee:	47b8      	blx	r7
 80025f0:	3001      	adds	r0, #1
 80025f2:	d1c2      	bne.n	800257a <_printf_float+0x332>
 80025f4:	e683      	b.n	80022fe <_printf_float+0xb6>
 80025f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025f8:	2a01      	cmp	r2, #1
 80025fa:	dc01      	bgt.n	8002600 <_printf_float+0x3b8>
 80025fc:	07db      	lsls	r3, r3, #31
 80025fe:	d537      	bpl.n	8002670 <_printf_float+0x428>
 8002600:	2301      	movs	r3, #1
 8002602:	4642      	mov	r2, r8
 8002604:	4631      	mov	r1, r6
 8002606:	4628      	mov	r0, r5
 8002608:	47b8      	blx	r7
 800260a:	3001      	adds	r0, #1
 800260c:	f43f ae77 	beq.w	80022fe <_printf_float+0xb6>
 8002610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002614:	4631      	mov	r1, r6
 8002616:	4628      	mov	r0, r5
 8002618:	47b8      	blx	r7
 800261a:	3001      	adds	r0, #1
 800261c:	f43f ae6f 	beq.w	80022fe <_printf_float+0xb6>
 8002620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002624:	2200      	movs	r2, #0
 8002626:	2300      	movs	r3, #0
 8002628:	f7fe f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800262c:	b9d8      	cbnz	r0, 8002666 <_printf_float+0x41e>
 800262e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002630:	f108 0201 	add.w	r2, r8, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	4631      	mov	r1, r6
 8002638:	4628      	mov	r0, r5
 800263a:	47b8      	blx	r7
 800263c:	3001      	adds	r0, #1
 800263e:	d10e      	bne.n	800265e <_printf_float+0x416>
 8002640:	e65d      	b.n	80022fe <_printf_float+0xb6>
 8002642:	2301      	movs	r3, #1
 8002644:	464a      	mov	r2, r9
 8002646:	4631      	mov	r1, r6
 8002648:	4628      	mov	r0, r5
 800264a:	47b8      	blx	r7
 800264c:	3001      	adds	r0, #1
 800264e:	f43f ae56 	beq.w	80022fe <_printf_float+0xb6>
 8002652:	f108 0801 	add.w	r8, r8, #1
 8002656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002658:	3b01      	subs	r3, #1
 800265a:	4543      	cmp	r3, r8
 800265c:	dcf1      	bgt.n	8002642 <_printf_float+0x3fa>
 800265e:	4653      	mov	r3, sl
 8002660:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002664:	e6e0      	b.n	8002428 <_printf_float+0x1e0>
 8002666:	f04f 0800 	mov.w	r8, #0
 800266a:	f104 091a 	add.w	r9, r4, #26
 800266e:	e7f2      	b.n	8002656 <_printf_float+0x40e>
 8002670:	2301      	movs	r3, #1
 8002672:	4642      	mov	r2, r8
 8002674:	e7df      	b.n	8002636 <_printf_float+0x3ee>
 8002676:	2301      	movs	r3, #1
 8002678:	464a      	mov	r2, r9
 800267a:	4631      	mov	r1, r6
 800267c:	4628      	mov	r0, r5
 800267e:	47b8      	blx	r7
 8002680:	3001      	adds	r0, #1
 8002682:	f43f ae3c 	beq.w	80022fe <_printf_float+0xb6>
 8002686:	f108 0801 	add.w	r8, r8, #1
 800268a:	68e3      	ldr	r3, [r4, #12]
 800268c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800268e:	1a5b      	subs	r3, r3, r1
 8002690:	4543      	cmp	r3, r8
 8002692:	dcf0      	bgt.n	8002676 <_printf_float+0x42e>
 8002694:	e6fd      	b.n	8002492 <_printf_float+0x24a>
 8002696:	f04f 0800 	mov.w	r8, #0
 800269a:	f104 0919 	add.w	r9, r4, #25
 800269e:	e7f4      	b.n	800268a <_printf_float+0x442>

080026a0 <_printf_common>:
 80026a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	4616      	mov	r6, r2
 80026a6:	4699      	mov	r9, r3
 80026a8:	688a      	ldr	r2, [r1, #8]
 80026aa:	690b      	ldr	r3, [r1, #16]
 80026ac:	4607      	mov	r7, r0
 80026ae:	4293      	cmp	r3, r2
 80026b0:	bfb8      	it	lt
 80026b2:	4613      	movlt	r3, r2
 80026b4:	6033      	str	r3, [r6, #0]
 80026b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026ba:	460c      	mov	r4, r1
 80026bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026c0:	b10a      	cbz	r2, 80026c6 <_printf_common+0x26>
 80026c2:	3301      	adds	r3, #1
 80026c4:	6033      	str	r3, [r6, #0]
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	0699      	lsls	r1, r3, #26
 80026ca:	bf42      	ittt	mi
 80026cc:	6833      	ldrmi	r3, [r6, #0]
 80026ce:	3302      	addmi	r3, #2
 80026d0:	6033      	strmi	r3, [r6, #0]
 80026d2:	6825      	ldr	r5, [r4, #0]
 80026d4:	f015 0506 	ands.w	r5, r5, #6
 80026d8:	d106      	bne.n	80026e8 <_printf_common+0x48>
 80026da:	f104 0a19 	add.w	sl, r4, #25
 80026de:	68e3      	ldr	r3, [r4, #12]
 80026e0:	6832      	ldr	r2, [r6, #0]
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	42ab      	cmp	r3, r5
 80026e6:	dc28      	bgt.n	800273a <_printf_common+0x9a>
 80026e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026ec:	1e13      	subs	r3, r2, #0
 80026ee:	6822      	ldr	r2, [r4, #0]
 80026f0:	bf18      	it	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	0692      	lsls	r2, r2, #26
 80026f6:	d42d      	bmi.n	8002754 <_printf_common+0xb4>
 80026f8:	4649      	mov	r1, r9
 80026fa:	4638      	mov	r0, r7
 80026fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002700:	47c0      	blx	r8
 8002702:	3001      	adds	r0, #1
 8002704:	d020      	beq.n	8002748 <_printf_common+0xa8>
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	68e5      	ldr	r5, [r4, #12]
 800270a:	f003 0306 	and.w	r3, r3, #6
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf18      	it	ne
 8002712:	2500      	movne	r5, #0
 8002714:	6832      	ldr	r2, [r6, #0]
 8002716:	f04f 0600 	mov.w	r6, #0
 800271a:	68a3      	ldr	r3, [r4, #8]
 800271c:	bf08      	it	eq
 800271e:	1aad      	subeq	r5, r5, r2
 8002720:	6922      	ldr	r2, [r4, #16]
 8002722:	bf08      	it	eq
 8002724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002728:	4293      	cmp	r3, r2
 800272a:	bfc4      	itt	gt
 800272c:	1a9b      	subgt	r3, r3, r2
 800272e:	18ed      	addgt	r5, r5, r3
 8002730:	341a      	adds	r4, #26
 8002732:	42b5      	cmp	r5, r6
 8002734:	d11a      	bne.n	800276c <_printf_common+0xcc>
 8002736:	2000      	movs	r0, #0
 8002738:	e008      	b.n	800274c <_printf_common+0xac>
 800273a:	2301      	movs	r3, #1
 800273c:	4652      	mov	r2, sl
 800273e:	4649      	mov	r1, r9
 8002740:	4638      	mov	r0, r7
 8002742:	47c0      	blx	r8
 8002744:	3001      	adds	r0, #1
 8002746:	d103      	bne.n	8002750 <_printf_common+0xb0>
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002750:	3501      	adds	r5, #1
 8002752:	e7c4      	b.n	80026de <_printf_common+0x3e>
 8002754:	2030      	movs	r0, #48	; 0x30
 8002756:	18e1      	adds	r1, r4, r3
 8002758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002762:	4422      	add	r2, r4
 8002764:	3302      	adds	r3, #2
 8002766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800276a:	e7c5      	b.n	80026f8 <_printf_common+0x58>
 800276c:	2301      	movs	r3, #1
 800276e:	4622      	mov	r2, r4
 8002770:	4649      	mov	r1, r9
 8002772:	4638      	mov	r0, r7
 8002774:	47c0      	blx	r8
 8002776:	3001      	adds	r0, #1
 8002778:	d0e6      	beq.n	8002748 <_printf_common+0xa8>
 800277a:	3601      	adds	r6, #1
 800277c:	e7d9      	b.n	8002732 <_printf_common+0x92>
	...

08002780 <_printf_i>:
 8002780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	7e0f      	ldrb	r7, [r1, #24]
 8002786:	4691      	mov	r9, r2
 8002788:	2f78      	cmp	r7, #120	; 0x78
 800278a:	4680      	mov	r8, r0
 800278c:	460c      	mov	r4, r1
 800278e:	469a      	mov	sl, r3
 8002790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002796:	d807      	bhi.n	80027a8 <_printf_i+0x28>
 8002798:	2f62      	cmp	r7, #98	; 0x62
 800279a:	d80a      	bhi.n	80027b2 <_printf_i+0x32>
 800279c:	2f00      	cmp	r7, #0
 800279e:	f000 80d9 	beq.w	8002954 <_printf_i+0x1d4>
 80027a2:	2f58      	cmp	r7, #88	; 0x58
 80027a4:	f000 80a4 	beq.w	80028f0 <_printf_i+0x170>
 80027a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80027b0:	e03a      	b.n	8002828 <_printf_i+0xa8>
 80027b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80027b6:	2b15      	cmp	r3, #21
 80027b8:	d8f6      	bhi.n	80027a8 <_printf_i+0x28>
 80027ba:	a101      	add	r1, pc, #4	; (adr r1, 80027c0 <_printf_i+0x40>)
 80027bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027c0:	08002819 	.word	0x08002819
 80027c4:	0800282d 	.word	0x0800282d
 80027c8:	080027a9 	.word	0x080027a9
 80027cc:	080027a9 	.word	0x080027a9
 80027d0:	080027a9 	.word	0x080027a9
 80027d4:	080027a9 	.word	0x080027a9
 80027d8:	0800282d 	.word	0x0800282d
 80027dc:	080027a9 	.word	0x080027a9
 80027e0:	080027a9 	.word	0x080027a9
 80027e4:	080027a9 	.word	0x080027a9
 80027e8:	080027a9 	.word	0x080027a9
 80027ec:	0800293b 	.word	0x0800293b
 80027f0:	0800285d 	.word	0x0800285d
 80027f4:	0800291d 	.word	0x0800291d
 80027f8:	080027a9 	.word	0x080027a9
 80027fc:	080027a9 	.word	0x080027a9
 8002800:	0800295d 	.word	0x0800295d
 8002804:	080027a9 	.word	0x080027a9
 8002808:	0800285d 	.word	0x0800285d
 800280c:	080027a9 	.word	0x080027a9
 8002810:	080027a9 	.word	0x080027a9
 8002814:	08002925 	.word	0x08002925
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	602a      	str	r2, [r5, #0]
 8002820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002828:	2301      	movs	r3, #1
 800282a:	e0a4      	b.n	8002976 <_printf_i+0x1f6>
 800282c:	6820      	ldr	r0, [r4, #0]
 800282e:	6829      	ldr	r1, [r5, #0]
 8002830:	0606      	lsls	r6, r0, #24
 8002832:	f101 0304 	add.w	r3, r1, #4
 8002836:	d50a      	bpl.n	800284e <_printf_i+0xce>
 8002838:	680e      	ldr	r6, [r1, #0]
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	2e00      	cmp	r6, #0
 800283e:	da03      	bge.n	8002848 <_printf_i+0xc8>
 8002840:	232d      	movs	r3, #45	; 0x2d
 8002842:	4276      	negs	r6, r6
 8002844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002848:	230a      	movs	r3, #10
 800284a:	485e      	ldr	r0, [pc, #376]	; (80029c4 <_printf_i+0x244>)
 800284c:	e019      	b.n	8002882 <_printf_i+0x102>
 800284e:	680e      	ldr	r6, [r1, #0]
 8002850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002854:	602b      	str	r3, [r5, #0]
 8002856:	bf18      	it	ne
 8002858:	b236      	sxthne	r6, r6
 800285a:	e7ef      	b.n	800283c <_printf_i+0xbc>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	1d19      	adds	r1, r3, #4
 8002862:	6029      	str	r1, [r5, #0]
 8002864:	0601      	lsls	r1, r0, #24
 8002866:	d501      	bpl.n	800286c <_printf_i+0xec>
 8002868:	681e      	ldr	r6, [r3, #0]
 800286a:	e002      	b.n	8002872 <_printf_i+0xf2>
 800286c:	0646      	lsls	r6, r0, #25
 800286e:	d5fb      	bpl.n	8002868 <_printf_i+0xe8>
 8002870:	881e      	ldrh	r6, [r3, #0]
 8002872:	2f6f      	cmp	r7, #111	; 0x6f
 8002874:	bf0c      	ite	eq
 8002876:	2308      	moveq	r3, #8
 8002878:	230a      	movne	r3, #10
 800287a:	4852      	ldr	r0, [pc, #328]	; (80029c4 <_printf_i+0x244>)
 800287c:	2100      	movs	r1, #0
 800287e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002882:	6865      	ldr	r5, [r4, #4]
 8002884:	2d00      	cmp	r5, #0
 8002886:	bfa8      	it	ge
 8002888:	6821      	ldrge	r1, [r4, #0]
 800288a:	60a5      	str	r5, [r4, #8]
 800288c:	bfa4      	itt	ge
 800288e:	f021 0104 	bicge.w	r1, r1, #4
 8002892:	6021      	strge	r1, [r4, #0]
 8002894:	b90e      	cbnz	r6, 800289a <_printf_i+0x11a>
 8002896:	2d00      	cmp	r5, #0
 8002898:	d04d      	beq.n	8002936 <_printf_i+0x1b6>
 800289a:	4615      	mov	r5, r2
 800289c:	fbb6 f1f3 	udiv	r1, r6, r3
 80028a0:	fb03 6711 	mls	r7, r3, r1, r6
 80028a4:	5dc7      	ldrb	r7, [r0, r7]
 80028a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80028aa:	4637      	mov	r7, r6
 80028ac:	42bb      	cmp	r3, r7
 80028ae:	460e      	mov	r6, r1
 80028b0:	d9f4      	bls.n	800289c <_printf_i+0x11c>
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d10b      	bne.n	80028ce <_printf_i+0x14e>
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	07de      	lsls	r6, r3, #31
 80028ba:	d508      	bpl.n	80028ce <_printf_i+0x14e>
 80028bc:	6923      	ldr	r3, [r4, #16]
 80028be:	6861      	ldr	r1, [r4, #4]
 80028c0:	4299      	cmp	r1, r3
 80028c2:	bfde      	ittt	le
 80028c4:	2330      	movle	r3, #48	; 0x30
 80028c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028ce:	1b52      	subs	r2, r2, r5
 80028d0:	6122      	str	r2, [r4, #16]
 80028d2:	464b      	mov	r3, r9
 80028d4:	4621      	mov	r1, r4
 80028d6:	4640      	mov	r0, r8
 80028d8:	f8cd a000 	str.w	sl, [sp]
 80028dc:	aa03      	add	r2, sp, #12
 80028de:	f7ff fedf 	bl	80026a0 <_printf_common>
 80028e2:	3001      	adds	r0, #1
 80028e4:	d14c      	bne.n	8002980 <_printf_i+0x200>
 80028e6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ea:	b004      	add	sp, #16
 80028ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f0:	4834      	ldr	r0, [pc, #208]	; (80029c4 <_printf_i+0x244>)
 80028f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80028f6:	6829      	ldr	r1, [r5, #0]
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80028fe:	6029      	str	r1, [r5, #0]
 8002900:	061d      	lsls	r5, r3, #24
 8002902:	d514      	bpl.n	800292e <_printf_i+0x1ae>
 8002904:	07df      	lsls	r7, r3, #31
 8002906:	bf44      	itt	mi
 8002908:	f043 0320 	orrmi.w	r3, r3, #32
 800290c:	6023      	strmi	r3, [r4, #0]
 800290e:	b91e      	cbnz	r6, 8002918 <_printf_i+0x198>
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	f023 0320 	bic.w	r3, r3, #32
 8002916:	6023      	str	r3, [r4, #0]
 8002918:	2310      	movs	r3, #16
 800291a:	e7af      	b.n	800287c <_printf_i+0xfc>
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	6023      	str	r3, [r4, #0]
 8002924:	2378      	movs	r3, #120	; 0x78
 8002926:	4828      	ldr	r0, [pc, #160]	; (80029c8 <_printf_i+0x248>)
 8002928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800292c:	e7e3      	b.n	80028f6 <_printf_i+0x176>
 800292e:	0659      	lsls	r1, r3, #25
 8002930:	bf48      	it	mi
 8002932:	b2b6      	uxthmi	r6, r6
 8002934:	e7e6      	b.n	8002904 <_printf_i+0x184>
 8002936:	4615      	mov	r5, r2
 8002938:	e7bb      	b.n	80028b2 <_printf_i+0x132>
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	6826      	ldr	r6, [r4, #0]
 800293e:	1d18      	adds	r0, r3, #4
 8002940:	6961      	ldr	r1, [r4, #20]
 8002942:	6028      	str	r0, [r5, #0]
 8002944:	0635      	lsls	r5, r6, #24
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	d501      	bpl.n	800294e <_printf_i+0x1ce>
 800294a:	6019      	str	r1, [r3, #0]
 800294c:	e002      	b.n	8002954 <_printf_i+0x1d4>
 800294e:	0670      	lsls	r0, r6, #25
 8002950:	d5fb      	bpl.n	800294a <_printf_i+0x1ca>
 8002952:	8019      	strh	r1, [r3, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	4615      	mov	r5, r2
 8002958:	6123      	str	r3, [r4, #16]
 800295a:	e7ba      	b.n	80028d2 <_printf_i+0x152>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	1d1a      	adds	r2, r3, #4
 8002962:	602a      	str	r2, [r5, #0]
 8002964:	681d      	ldr	r5, [r3, #0]
 8002966:	6862      	ldr	r2, [r4, #4]
 8002968:	4628      	mov	r0, r5
 800296a:	f000 ffc9 	bl	8003900 <memchr>
 800296e:	b108      	cbz	r0, 8002974 <_printf_i+0x1f4>
 8002970:	1b40      	subs	r0, r0, r5
 8002972:	6060      	str	r0, [r4, #4]
 8002974:	6863      	ldr	r3, [r4, #4]
 8002976:	6123      	str	r3, [r4, #16]
 8002978:	2300      	movs	r3, #0
 800297a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800297e:	e7a8      	b.n	80028d2 <_printf_i+0x152>
 8002980:	462a      	mov	r2, r5
 8002982:	4649      	mov	r1, r9
 8002984:	4640      	mov	r0, r8
 8002986:	6923      	ldr	r3, [r4, #16]
 8002988:	47d0      	blx	sl
 800298a:	3001      	adds	r0, #1
 800298c:	d0ab      	beq.n	80028e6 <_printf_i+0x166>
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	079b      	lsls	r3, r3, #30
 8002992:	d413      	bmi.n	80029bc <_printf_i+0x23c>
 8002994:	68e0      	ldr	r0, [r4, #12]
 8002996:	9b03      	ldr	r3, [sp, #12]
 8002998:	4298      	cmp	r0, r3
 800299a:	bfb8      	it	lt
 800299c:	4618      	movlt	r0, r3
 800299e:	e7a4      	b.n	80028ea <_printf_i+0x16a>
 80029a0:	2301      	movs	r3, #1
 80029a2:	4632      	mov	r2, r6
 80029a4:	4649      	mov	r1, r9
 80029a6:	4640      	mov	r0, r8
 80029a8:	47d0      	blx	sl
 80029aa:	3001      	adds	r0, #1
 80029ac:	d09b      	beq.n	80028e6 <_printf_i+0x166>
 80029ae:	3501      	adds	r5, #1
 80029b0:	68e3      	ldr	r3, [r4, #12]
 80029b2:	9903      	ldr	r1, [sp, #12]
 80029b4:	1a5b      	subs	r3, r3, r1
 80029b6:	42ab      	cmp	r3, r5
 80029b8:	dcf2      	bgt.n	80029a0 <_printf_i+0x220>
 80029ba:	e7eb      	b.n	8002994 <_printf_i+0x214>
 80029bc:	2500      	movs	r5, #0
 80029be:	f104 0619 	add.w	r6, r4, #25
 80029c2:	e7f5      	b.n	80029b0 <_printf_i+0x230>
 80029c4:	08004bc6 	.word	0x08004bc6
 80029c8:	08004bd7 	.word	0x08004bd7

080029cc <iprintf>:
 80029cc:	b40f      	push	{r0, r1, r2, r3}
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <iprintf+0x2c>)
 80029d0:	b513      	push	{r0, r1, r4, lr}
 80029d2:	681c      	ldr	r4, [r3, #0]
 80029d4:	b124      	cbz	r4, 80029e0 <iprintf+0x14>
 80029d6:	69a3      	ldr	r3, [r4, #24]
 80029d8:	b913      	cbnz	r3, 80029e0 <iprintf+0x14>
 80029da:	4620      	mov	r0, r4
 80029dc:	f000 fee2 	bl	80037a4 <__sinit>
 80029e0:	ab05      	add	r3, sp, #20
 80029e2:	4620      	mov	r0, r4
 80029e4:	9a04      	ldr	r2, [sp, #16]
 80029e6:	68a1      	ldr	r1, [r4, #8]
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	f001 fc3f 	bl	800426c <_vfiprintf_r>
 80029ee:	b002      	add	sp, #8
 80029f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029f4:	b004      	add	sp, #16
 80029f6:	4770      	bx	lr
 80029f8:	2000000c 	.word	0x2000000c

080029fc <quorem>:
 80029fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a00:	6903      	ldr	r3, [r0, #16]
 8002a02:	690c      	ldr	r4, [r1, #16]
 8002a04:	4607      	mov	r7, r0
 8002a06:	42a3      	cmp	r3, r4
 8002a08:	f2c0 8082 	blt.w	8002b10 <quorem+0x114>
 8002a0c:	3c01      	subs	r4, #1
 8002a0e:	f100 0514 	add.w	r5, r0, #20
 8002a12:	f101 0814 	add.w	r8, r1, #20
 8002a16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a24:	3301      	adds	r3, #1
 8002a26:	429a      	cmp	r2, r3
 8002a28:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002a30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a34:	d331      	bcc.n	8002a9a <quorem+0x9e>
 8002a36:	f04f 0e00 	mov.w	lr, #0
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	46ac      	mov	ip, r5
 8002a3e:	46f2      	mov	sl, lr
 8002a40:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a44:	b293      	uxth	r3, r2
 8002a46:	fb06 e303 	mla	r3, r6, r3, lr
 8002a4a:	0c12      	lsrs	r2, r2, #16
 8002a4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	fb06 e202 	mla	r2, r6, r2, lr
 8002a56:	ebaa 0303 	sub.w	r3, sl, r3
 8002a5a:	f8dc a000 	ldr.w	sl, [ip]
 8002a5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002a62:	fa1f fa8a 	uxth.w	sl, sl
 8002a66:	4453      	add	r3, sl
 8002a68:	f8dc a000 	ldr.w	sl, [ip]
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a7c:	4581      	cmp	r9, r0
 8002a7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002a82:	f84c 3b04 	str.w	r3, [ip], #4
 8002a86:	d2db      	bcs.n	8002a40 <quorem+0x44>
 8002a88:	f855 300b 	ldr.w	r3, [r5, fp]
 8002a8c:	b92b      	cbnz	r3, 8002a9a <quorem+0x9e>
 8002a8e:	9b01      	ldr	r3, [sp, #4]
 8002a90:	3b04      	subs	r3, #4
 8002a92:	429d      	cmp	r5, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	d32f      	bcc.n	8002af8 <quorem+0xfc>
 8002a98:	613c      	str	r4, [r7, #16]
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	f001 f9ca 	bl	8003e34 <__mcmp>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	db25      	blt.n	8002af0 <quorem+0xf4>
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f04f 0c00 	mov.w	ip, #0
 8002aaa:	3601      	adds	r6, #1
 8002aac:	f858 1b04 	ldr.w	r1, [r8], #4
 8002ab0:	f8d0 e000 	ldr.w	lr, [r0]
 8002ab4:	b28b      	uxth	r3, r1
 8002ab6:	ebac 0303 	sub.w	r3, ip, r3
 8002aba:	fa1f f28e 	uxth.w	r2, lr
 8002abe:	4413      	add	r3, r2
 8002ac0:	0c0a      	lsrs	r2, r1, #16
 8002ac2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002ac6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ad0:	45c1      	cmp	r9, r8
 8002ad2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002ad6:	f840 3b04 	str.w	r3, [r0], #4
 8002ada:	d2e7      	bcs.n	8002aac <quorem+0xb0>
 8002adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002ae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002ae4:	b922      	cbnz	r2, 8002af0 <quorem+0xf4>
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	429d      	cmp	r5, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	d30a      	bcc.n	8002b04 <quorem+0x108>
 8002aee:	613c      	str	r4, [r7, #16]
 8002af0:	4630      	mov	r0, r6
 8002af2:	b003      	add	sp, #12
 8002af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	3b04      	subs	r3, #4
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	d1cb      	bne.n	8002a98 <quorem+0x9c>
 8002b00:	3c01      	subs	r4, #1
 8002b02:	e7c6      	b.n	8002a92 <quorem+0x96>
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	3b04      	subs	r3, #4
 8002b08:	2a00      	cmp	r2, #0
 8002b0a:	d1f0      	bne.n	8002aee <quorem+0xf2>
 8002b0c:	3c01      	subs	r4, #1
 8002b0e:	e7eb      	b.n	8002ae8 <quorem+0xec>
 8002b10:	2000      	movs	r0, #0
 8002b12:	e7ee      	b.n	8002af2 <quorem+0xf6>
 8002b14:	0000      	movs	r0, r0
	...

08002b18 <_dtoa_r>:
 8002b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1c:	4616      	mov	r6, r2
 8002b1e:	461f      	mov	r7, r3
 8002b20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002b22:	b099      	sub	sp, #100	; 0x64
 8002b24:	4605      	mov	r5, r0
 8002b26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002b2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002b2e:	b974      	cbnz	r4, 8002b4e <_dtoa_r+0x36>
 8002b30:	2010      	movs	r0, #16
 8002b32:	f000 fedd 	bl	80038f0 <malloc>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6268      	str	r0, [r5, #36]	; 0x24
 8002b3a:	b920      	cbnz	r0, 8002b46 <_dtoa_r+0x2e>
 8002b3c:	21ea      	movs	r1, #234	; 0xea
 8002b3e:	4ba8      	ldr	r3, [pc, #672]	; (8002de0 <_dtoa_r+0x2c8>)
 8002b40:	48a8      	ldr	r0, [pc, #672]	; (8002de4 <_dtoa_r+0x2cc>)
 8002b42:	f001 fde9 	bl	8004718 <__assert_func>
 8002b46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002b4a:	6004      	str	r4, [r0, #0]
 8002b4c:	60c4      	str	r4, [r0, #12]
 8002b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	b151      	cbz	r1, 8002b6a <_dtoa_r+0x52>
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	2301      	movs	r3, #1
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	604a      	str	r2, [r1, #4]
 8002b5c:	608b      	str	r3, [r1, #8]
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f000 ff2a 	bl	80039b8 <_Bfree>
 8002b64:	2200      	movs	r2, #0
 8002b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	1e3b      	subs	r3, r7, #0
 8002b6c:	bfaf      	iteee	ge
 8002b6e:	2300      	movge	r3, #0
 8002b70:	2201      	movlt	r2, #1
 8002b72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b76:	9305      	strlt	r3, [sp, #20]
 8002b78:	bfa8      	it	ge
 8002b7a:	f8c8 3000 	strge.w	r3, [r8]
 8002b7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002b82:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <_dtoa_r+0x2d0>)
 8002b84:	bfb8      	it	lt
 8002b86:	f8c8 2000 	strlt.w	r2, [r8]
 8002b8a:	ea33 0309 	bics.w	r3, r3, r9
 8002b8e:	d119      	bne.n	8002bc4 <_dtoa_r+0xac>
 8002b90:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002b9c:	4333      	orrs	r3, r6
 8002b9e:	f000 857f 	beq.w	80036a0 <_dtoa_r+0xb88>
 8002ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002ba4:	b953      	cbnz	r3, 8002bbc <_dtoa_r+0xa4>
 8002ba6:	4b91      	ldr	r3, [pc, #580]	; (8002dec <_dtoa_r+0x2d4>)
 8002ba8:	e022      	b.n	8002bf0 <_dtoa_r+0xd8>
 8002baa:	4b91      	ldr	r3, [pc, #580]	; (8002df0 <_dtoa_r+0x2d8>)
 8002bac:	9303      	str	r3, [sp, #12]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	9803      	ldr	r0, [sp, #12]
 8002bb6:	b019      	add	sp, #100	; 0x64
 8002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbc:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <_dtoa_r+0x2d4>)
 8002bbe:	9303      	str	r3, [sp, #12]
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	e7f5      	b.n	8002bb0 <_dtoa_r+0x98>
 8002bc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002bc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f7fd fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8002bd8:	4680      	mov	r8, r0
 8002bda:	b158      	cbz	r0, 8002bf4 <_dtoa_r+0xdc>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8558 	beq.w	800369a <_dtoa_r+0xb82>
 8002bea:	4882      	ldr	r0, [pc, #520]	; (8002df4 <_dtoa_r+0x2dc>)
 8002bec:	6018      	str	r0, [r3, #0]
 8002bee:	1e43      	subs	r3, r0, #1
 8002bf0:	9303      	str	r3, [sp, #12]
 8002bf2:	e7df      	b.n	8002bb4 <_dtoa_r+0x9c>
 8002bf4:	ab16      	add	r3, sp, #88	; 0x58
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	ab17      	add	r3, sp, #92	; 0x5c
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002c02:	f001 f9bf 	bl	8003f84 <__d2b>
 8002c06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002c0a:	4683      	mov	fp, r0
 8002c0c:	2c00      	cmp	r4, #0
 8002c0e:	d07f      	beq.n	8002d10 <_dtoa_r+0x1f8>
 8002c10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002c1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002c22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002c26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <_dtoa_r+0x2e0>)
 8002c2e:	f7fd fa9b 	bl	8000168 <__aeabi_dsub>
 8002c32:	a365      	add	r3, pc, #404	; (adr r3, 8002dc8 <_dtoa_r+0x2b0>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fc4e 	bl	80004d8 <__aeabi_dmul>
 8002c3c:	a364      	add	r3, pc, #400	; (adr r3, 8002dd0 <_dtoa_r+0x2b8>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	f7fd fa93 	bl	800016c <__adddf3>
 8002c46:	4606      	mov	r6, r0
 8002c48:	4620      	mov	r0, r4
 8002c4a:	460f      	mov	r7, r1
 8002c4c:	f7fd fbda 	bl	8000404 <__aeabi_i2d>
 8002c50:	a361      	add	r3, pc, #388	; (adr r3, 8002dd8 <_dtoa_r+0x2c0>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fc3f 	bl	80004d8 <__aeabi_dmul>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4630      	mov	r0, r6
 8002c60:	4639      	mov	r1, r7
 8002c62:	f7fd fa83 	bl	800016c <__adddf3>
 8002c66:	4606      	mov	r6, r0
 8002c68:	460f      	mov	r7, r1
 8002c6a:	f7fd fee5 	bl	8000a38 <__aeabi_d2iz>
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4682      	mov	sl, r0
 8002c72:	2300      	movs	r3, #0
 8002c74:	4630      	mov	r0, r6
 8002c76:	4639      	mov	r1, r7
 8002c78:	f7fd fea0 	bl	80009bc <__aeabi_dcmplt>
 8002c7c:	b148      	cbz	r0, 8002c92 <_dtoa_r+0x17a>
 8002c7e:	4650      	mov	r0, sl
 8002c80:	f7fd fbc0 	bl	8000404 <__aeabi_i2d>
 8002c84:	4632      	mov	r2, r6
 8002c86:	463b      	mov	r3, r7
 8002c88:	f7fd fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8002c8c:	b908      	cbnz	r0, 8002c92 <_dtoa_r+0x17a>
 8002c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002c92:	f1ba 0f16 	cmp.w	sl, #22
 8002c96:	d858      	bhi.n	8002d4a <_dtoa_r+0x232>
 8002c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002c9c:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <_dtoa_r+0x2e4>)
 8002c9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd fe89 	bl	80009bc <__aeabi_dcmplt>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d04f      	beq.n	8002d4e <_dtoa_r+0x236>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002cb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002cb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002cb8:	1b1c      	subs	r4, r3, r4
 8002cba:	1e63      	subs	r3, r4, #1
 8002cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cbe:	bf49      	itett	mi
 8002cc0:	f1c4 0301 	rsbmi	r3, r4, #1
 8002cc4:	2300      	movpl	r3, #0
 8002cc6:	9306      	strmi	r3, [sp, #24]
 8002cc8:	2300      	movmi	r3, #0
 8002cca:	bf54      	ite	pl
 8002ccc:	9306      	strpl	r3, [sp, #24]
 8002cce:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002cd0:	f1ba 0f00 	cmp.w	sl, #0
 8002cd4:	db3d      	blt.n	8002d52 <_dtoa_r+0x23a>
 8002cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cd8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002cdc:	4453      	add	r3, sl
 8002cde:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8002ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ce6:	2b09      	cmp	r3, #9
 8002ce8:	f200 808c 	bhi.w	8002e04 <_dtoa_r+0x2ec>
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	bfc4      	itt	gt
 8002cf0:	3b04      	subgt	r3, #4
 8002cf2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002cf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002cf6:	bfc8      	it	gt
 8002cf8:	2400      	movgt	r4, #0
 8002cfa:	f1a3 0302 	sub.w	r3, r3, #2
 8002cfe:	bfd8      	it	le
 8002d00:	2401      	movle	r4, #1
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	f200 808a 	bhi.w	8002e1c <_dtoa_r+0x304>
 8002d08:	e8df f003 	tbb	[pc, r3]
 8002d0c:	5b4d4f2d 	.word	0x5b4d4f2d
 8002d10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002d14:	441c      	add	r4, r3
 8002d16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	bfc3      	ittte	gt
 8002d1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002d22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002d26:	fa09 f303 	lslgt.w	r3, r9, r3
 8002d2a:	f1c3 0320 	rsble	r3, r3, #32
 8002d2e:	bfc6      	itte	gt
 8002d30:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002d34:	4318      	orrgt	r0, r3
 8002d36:	fa06 f003 	lslle.w	r0, r6, r3
 8002d3a:	f7fd fb53 	bl	80003e4 <__aeabi_ui2d>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002d44:	3c01      	subs	r4, #1
 8002d46:	9313      	str	r3, [sp, #76]	; 0x4c
 8002d48:	e76f      	b.n	8002c2a <_dtoa_r+0x112>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e7b2      	b.n	8002cb4 <_dtoa_r+0x19c>
 8002d4e:	900f      	str	r0, [sp, #60]	; 0x3c
 8002d50:	e7b1      	b.n	8002cb6 <_dtoa_r+0x19e>
 8002d52:	9b06      	ldr	r3, [sp, #24]
 8002d54:	eba3 030a 	sub.w	r3, r3, sl
 8002d58:	9306      	str	r3, [sp, #24]
 8002d5a:	f1ca 0300 	rsb	r3, sl, #0
 8002d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8002d60:	2300      	movs	r3, #0
 8002d62:	930e      	str	r3, [sp, #56]	; 0x38
 8002d64:	e7be      	b.n	8002ce4 <_dtoa_r+0x1cc>
 8002d66:	2300      	movs	r3, #0
 8002d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dc58      	bgt.n	8002e22 <_dtoa_r+0x30a>
 8002d70:	f04f 0901 	mov.w	r9, #1
 8002d74:	464b      	mov	r3, r9
 8002d76:	f8cd 9020 	str.w	r9, [sp, #32]
 8002d7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8002d7e:	2200      	movs	r2, #0
 8002d80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002d82:	6042      	str	r2, [r0, #4]
 8002d84:	2204      	movs	r2, #4
 8002d86:	f102 0614 	add.w	r6, r2, #20
 8002d8a:	429e      	cmp	r6, r3
 8002d8c:	6841      	ldr	r1, [r0, #4]
 8002d8e:	d94e      	bls.n	8002e2e <_dtoa_r+0x316>
 8002d90:	4628      	mov	r0, r5
 8002d92:	f000 fdd1 	bl	8003938 <_Balloc>
 8002d96:	9003      	str	r0, [sp, #12]
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d14c      	bne.n	8002e36 <_dtoa_r+0x31e>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <_dtoa_r+0x2e8>)
 8002da4:	e6cc      	b.n	8002b40 <_dtoa_r+0x28>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e7de      	b.n	8002d68 <_dtoa_r+0x250>
 8002daa:	2300      	movs	r3, #0
 8002dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002db0:	eb0a 0903 	add.w	r9, sl, r3
 8002db4:	f109 0301 	add.w	r3, r9, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	9308      	str	r3, [sp, #32]
 8002dbc:	bfb8      	it	lt
 8002dbe:	2301      	movlt	r3, #1
 8002dc0:	e7dd      	b.n	8002d7e <_dtoa_r+0x266>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e7f2      	b.n	8002dac <_dtoa_r+0x294>
 8002dc6:	bf00      	nop
 8002dc8:	636f4361 	.word	0x636f4361
 8002dcc:	3fd287a7 	.word	0x3fd287a7
 8002dd0:	8b60c8b3 	.word	0x8b60c8b3
 8002dd4:	3fc68a28 	.word	0x3fc68a28
 8002dd8:	509f79fb 	.word	0x509f79fb
 8002ddc:	3fd34413 	.word	0x3fd34413
 8002de0:	08004bf5 	.word	0x08004bf5
 8002de4:	08004c0c 	.word	0x08004c0c
 8002de8:	7ff00000 	.word	0x7ff00000
 8002dec:	08004bf1 	.word	0x08004bf1
 8002df0:	08004be8 	.word	0x08004be8
 8002df4:	08004bc5 	.word	0x08004bc5
 8002df8:	3ff80000 	.word	0x3ff80000
 8002dfc:	08004d60 	.word	0x08004d60
 8002e00:	08004c67 	.word	0x08004c67
 8002e04:	2401      	movs	r4, #1
 8002e06:	2300      	movs	r3, #0
 8002e08:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e0a:	9322      	str	r3, [sp, #136]	; 0x88
 8002e0c:	f04f 39ff 	mov.w	r9, #4294967295
 8002e10:	2200      	movs	r2, #0
 8002e12:	2312      	movs	r3, #18
 8002e14:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e18:	9223      	str	r2, [sp, #140]	; 0x8c
 8002e1a:	e7b0      	b.n	8002d7e <_dtoa_r+0x266>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e20:	e7f4      	b.n	8002e0c <_dtoa_r+0x2f4>
 8002e22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8002e26:	464b      	mov	r3, r9
 8002e28:	f8cd 9020 	str.w	r9, [sp, #32]
 8002e2c:	e7a7      	b.n	8002d7e <_dtoa_r+0x266>
 8002e2e:	3101      	adds	r1, #1
 8002e30:	6041      	str	r1, [r0, #4]
 8002e32:	0052      	lsls	r2, r2, #1
 8002e34:	e7a7      	b.n	8002d86 <_dtoa_r+0x26e>
 8002e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002e38:	9a03      	ldr	r2, [sp, #12]
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	9b08      	ldr	r3, [sp, #32]
 8002e3e:	2b0e      	cmp	r3, #14
 8002e40:	f200 80a8 	bhi.w	8002f94 <_dtoa_r+0x47c>
 8002e44:	2c00      	cmp	r4, #0
 8002e46:	f000 80a5 	beq.w	8002f94 <_dtoa_r+0x47c>
 8002e4a:	f1ba 0f00 	cmp.w	sl, #0
 8002e4e:	dd34      	ble.n	8002eba <_dtoa_r+0x3a2>
 8002e50:	4a9a      	ldr	r2, [pc, #616]	; (80030bc <_dtoa_r+0x5a4>)
 8002e52:	f00a 030f 	and.w	r3, sl, #15
 8002e56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002e5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002e5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002e66:	ea4f 142a 	mov.w	r4, sl, asr #4
 8002e6a:	d016      	beq.n	8002e9a <_dtoa_r+0x382>
 8002e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e70:	4b93      	ldr	r3, [pc, #588]	; (80030c0 <_dtoa_r+0x5a8>)
 8002e72:	2703      	movs	r7, #3
 8002e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e78:	f7fd fc58 	bl	800072c <__aeabi_ddiv>
 8002e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e80:	f004 040f 	and.w	r4, r4, #15
 8002e84:	4e8e      	ldr	r6, [pc, #568]	; (80030c0 <_dtoa_r+0x5a8>)
 8002e86:	b954      	cbnz	r4, 8002e9e <_dtoa_r+0x386>
 8002e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e90:	f7fd fc4c 	bl	800072c <__aeabi_ddiv>
 8002e94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e98:	e029      	b.n	8002eee <_dtoa_r+0x3d6>
 8002e9a:	2702      	movs	r7, #2
 8002e9c:	e7f2      	b.n	8002e84 <_dtoa_r+0x36c>
 8002e9e:	07e1      	lsls	r1, r4, #31
 8002ea0:	d508      	bpl.n	8002eb4 <_dtoa_r+0x39c>
 8002ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002ea6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002eaa:	f7fd fb15 	bl	80004d8 <__aeabi_dmul>
 8002eae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002eb2:	3701      	adds	r7, #1
 8002eb4:	1064      	asrs	r4, r4, #1
 8002eb6:	3608      	adds	r6, #8
 8002eb8:	e7e5      	b.n	8002e86 <_dtoa_r+0x36e>
 8002eba:	f000 80a5 	beq.w	8003008 <_dtoa_r+0x4f0>
 8002ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002ec2:	f1ca 0400 	rsb	r4, sl, #0
 8002ec6:	4b7d      	ldr	r3, [pc, #500]	; (80030bc <_dtoa_r+0x5a4>)
 8002ec8:	f004 020f 	and.w	r2, r4, #15
 8002ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fb00 	bl	80004d8 <__aeabi_dmul>
 8002ed8:	2702      	movs	r7, #2
 8002eda:	2300      	movs	r3, #0
 8002edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ee0:	4e77      	ldr	r6, [pc, #476]	; (80030c0 <_dtoa_r+0x5a8>)
 8002ee2:	1124      	asrs	r4, r4, #4
 8002ee4:	2c00      	cmp	r4, #0
 8002ee6:	f040 8084 	bne.w	8002ff2 <_dtoa_r+0x4da>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1d2      	bne.n	8002e94 <_dtoa_r+0x37c>
 8002eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 808b 	beq.w	800300c <_dtoa_r+0x4f4>
 8002ef6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002efa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002efe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f02:	2200      	movs	r2, #0
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <_dtoa_r+0x5ac>)
 8002f06:	f7fd fd59 	bl	80009bc <__aeabi_dcmplt>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	d07e      	beq.n	800300c <_dtoa_r+0x4f4>
 8002f0e:	9b08      	ldr	r3, [sp, #32]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d07b      	beq.n	800300c <_dtoa_r+0x4f4>
 8002f14:	f1b9 0f00 	cmp.w	r9, #0
 8002f18:	dd38      	ble.n	8002f8c <_dtoa_r+0x474>
 8002f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4b69      	ldr	r3, [pc, #420]	; (80030c8 <_dtoa_r+0x5b0>)
 8002f22:	f7fd fad9 	bl	80004d8 <__aeabi_dmul>
 8002f26:	464c      	mov	r4, r9
 8002f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8002f30:	3701      	adds	r7, #1
 8002f32:	4638      	mov	r0, r7
 8002f34:	f7fd fa66 	bl	8000404 <__aeabi_i2d>
 8002f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f3c:	f7fd facc 	bl	80004d8 <__aeabi_dmul>
 8002f40:	2200      	movs	r2, #0
 8002f42:	4b62      	ldr	r3, [pc, #392]	; (80030cc <_dtoa_r+0x5b4>)
 8002f44:	f7fd f912 	bl	800016c <__adddf3>
 8002f48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002f4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f50:	9611      	str	r6, [sp, #68]	; 0x44
 8002f52:	2c00      	cmp	r4, #0
 8002f54:	d15d      	bne.n	8003012 <_dtoa_r+0x4fa>
 8002f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <_dtoa_r+0x5b8>)
 8002f5e:	f7fd f903 	bl	8000168 <__aeabi_dsub>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f6a:	4633      	mov	r3, r6
 8002f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f6e:	f7fd fd43 	bl	80009f8 <__aeabi_dcmpgt>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f040 829c 	bne.w	80034b0 <_dtoa_r+0x998>
 8002f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002f7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002f82:	f7fd fd1b 	bl	80009bc <__aeabi_dcmplt>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f040 8290 	bne.w	80034ac <_dtoa_r+0x994>
 8002f8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8002f90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f2c0 8152 	blt.w	8003240 <_dtoa_r+0x728>
 8002f9c:	f1ba 0f0e 	cmp.w	sl, #14
 8002fa0:	f300 814e 	bgt.w	8003240 <_dtoa_r+0x728>
 8002fa4:	4b45      	ldr	r3, [pc, #276]	; (80030bc <_dtoa_r+0x5a4>)
 8002fa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002fb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f280 80db 	bge.w	8003170 <_dtoa_r+0x658>
 8002fba:	9b08      	ldr	r3, [sp, #32]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f300 80d7 	bgt.w	8003170 <_dtoa_r+0x658>
 8002fc2:	f040 8272 	bne.w	80034aa <_dtoa_r+0x992>
 8002fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4b40      	ldr	r3, [pc, #256]	; (80030d0 <_dtoa_r+0x5b8>)
 8002fce:	f7fd fa83 	bl	80004d8 <__aeabi_dmul>
 8002fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fd6:	f7fd fd05 	bl	80009e4 <__aeabi_dcmpge>
 8002fda:	9c08      	ldr	r4, [sp, #32]
 8002fdc:	4626      	mov	r6, r4
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	f040 8248 	bne.w	8003474 <_dtoa_r+0x95c>
 8002fe4:	2331      	movs	r3, #49	; 0x31
 8002fe6:	9f03      	ldr	r7, [sp, #12]
 8002fe8:	f10a 0a01 	add.w	sl, sl, #1
 8002fec:	f807 3b01 	strb.w	r3, [r7], #1
 8002ff0:	e244      	b.n	800347c <_dtoa_r+0x964>
 8002ff2:	07e2      	lsls	r2, r4, #31
 8002ff4:	d505      	bpl.n	8003002 <_dtoa_r+0x4ea>
 8002ff6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002ffa:	f7fd fa6d 	bl	80004d8 <__aeabi_dmul>
 8002ffe:	2301      	movs	r3, #1
 8003000:	3701      	adds	r7, #1
 8003002:	1064      	asrs	r4, r4, #1
 8003004:	3608      	adds	r6, #8
 8003006:	e76d      	b.n	8002ee4 <_dtoa_r+0x3cc>
 8003008:	2702      	movs	r7, #2
 800300a:	e770      	b.n	8002eee <_dtoa_r+0x3d6>
 800300c:	46d0      	mov	r8, sl
 800300e:	9c08      	ldr	r4, [sp, #32]
 8003010:	e78f      	b.n	8002f32 <_dtoa_r+0x41a>
 8003012:	9903      	ldr	r1, [sp, #12]
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <_dtoa_r+0x5a4>)
 8003016:	4421      	add	r1, r4
 8003018:	9112      	str	r1, [sp, #72]	; 0x48
 800301a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800301c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003020:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003024:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003028:	2900      	cmp	r1, #0
 800302a:	d055      	beq.n	80030d8 <_dtoa_r+0x5c0>
 800302c:	2000      	movs	r0, #0
 800302e:	4929      	ldr	r1, [pc, #164]	; (80030d4 <_dtoa_r+0x5bc>)
 8003030:	f7fd fb7c 	bl	800072c <__aeabi_ddiv>
 8003034:	463b      	mov	r3, r7
 8003036:	4632      	mov	r2, r6
 8003038:	f7fd f896 	bl	8000168 <__aeabi_dsub>
 800303c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003040:	9f03      	ldr	r7, [sp, #12]
 8003042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003046:	f7fd fcf7 	bl	8000a38 <__aeabi_d2iz>
 800304a:	4604      	mov	r4, r0
 800304c:	f7fd f9da 	bl	8000404 <__aeabi_i2d>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003058:	f7fd f886 	bl	8000168 <__aeabi_dsub>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	3430      	adds	r4, #48	; 0x30
 8003062:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800306a:	f807 4b01 	strb.w	r4, [r7], #1
 800306e:	f7fd fca5 	bl	80009bc <__aeabi_dcmplt>
 8003072:	2800      	cmp	r0, #0
 8003074:	d174      	bne.n	8003160 <_dtoa_r+0x648>
 8003076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800307a:	2000      	movs	r0, #0
 800307c:	4911      	ldr	r1, [pc, #68]	; (80030c4 <_dtoa_r+0x5ac>)
 800307e:	f7fd f873 	bl	8000168 <__aeabi_dsub>
 8003082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003086:	f7fd fc99 	bl	80009bc <__aeabi_dcmplt>
 800308a:	2800      	cmp	r0, #0
 800308c:	f040 80b7 	bne.w	80031fe <_dtoa_r+0x6e6>
 8003090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003092:	429f      	cmp	r7, r3
 8003094:	f43f af7a 	beq.w	8002f8c <_dtoa_r+0x474>
 8003098:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800309c:	2200      	movs	r2, #0
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <_dtoa_r+0x5b0>)
 80030a0:	f7fd fa1a 	bl	80004d8 <__aeabi_dmul>
 80030a4:	2200      	movs	r2, #0
 80030a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <_dtoa_r+0x5b0>)
 80030b0:	f7fd fa12 	bl	80004d8 <__aeabi_dmul>
 80030b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030b8:	e7c3      	b.n	8003042 <_dtoa_r+0x52a>
 80030ba:	bf00      	nop
 80030bc:	08004d60 	.word	0x08004d60
 80030c0:	08004d38 	.word	0x08004d38
 80030c4:	3ff00000 	.word	0x3ff00000
 80030c8:	40240000 	.word	0x40240000
 80030cc:	401c0000 	.word	0x401c0000
 80030d0:	40140000 	.word	0x40140000
 80030d4:	3fe00000 	.word	0x3fe00000
 80030d8:	4630      	mov	r0, r6
 80030da:	4639      	mov	r1, r7
 80030dc:	f7fd f9fc 	bl	80004d8 <__aeabi_dmul>
 80030e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030e6:	9c03      	ldr	r4, [sp, #12]
 80030e8:	9314      	str	r3, [sp, #80]	; 0x50
 80030ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030ee:	f7fd fca3 	bl	8000a38 <__aeabi_d2iz>
 80030f2:	9015      	str	r0, [sp, #84]	; 0x54
 80030f4:	f7fd f986 	bl	8000404 <__aeabi_i2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003100:	f7fd f832 	bl	8000168 <__aeabi_dsub>
 8003104:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003106:	4606      	mov	r6, r0
 8003108:	3330      	adds	r3, #48	; 0x30
 800310a:	f804 3b01 	strb.w	r3, [r4], #1
 800310e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003110:	460f      	mov	r7, r1
 8003112:	429c      	cmp	r4, r3
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	d124      	bne.n	8003164 <_dtoa_r+0x64c>
 800311a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800311e:	4bb0      	ldr	r3, [pc, #704]	; (80033e0 <_dtoa_r+0x8c8>)
 8003120:	f7fd f824 	bl	800016c <__adddf3>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4630      	mov	r0, r6
 800312a:	4639      	mov	r1, r7
 800312c:	f7fd fc64 	bl	80009f8 <__aeabi_dcmpgt>
 8003130:	2800      	cmp	r0, #0
 8003132:	d163      	bne.n	80031fc <_dtoa_r+0x6e4>
 8003134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003138:	2000      	movs	r0, #0
 800313a:	49a9      	ldr	r1, [pc, #676]	; (80033e0 <_dtoa_r+0x8c8>)
 800313c:	f7fd f814 	bl	8000168 <__aeabi_dsub>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4630      	mov	r0, r6
 8003146:	4639      	mov	r1, r7
 8003148:	f7fd fc38 	bl	80009bc <__aeabi_dcmplt>
 800314c:	2800      	cmp	r0, #0
 800314e:	f43f af1d 	beq.w	8002f8c <_dtoa_r+0x474>
 8003152:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003154:	1e7b      	subs	r3, r7, #1
 8003156:	9314      	str	r3, [sp, #80]	; 0x50
 8003158:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800315c:	2b30      	cmp	r3, #48	; 0x30
 800315e:	d0f8      	beq.n	8003152 <_dtoa_r+0x63a>
 8003160:	46c2      	mov	sl, r8
 8003162:	e03b      	b.n	80031dc <_dtoa_r+0x6c4>
 8003164:	4b9f      	ldr	r3, [pc, #636]	; (80033e4 <_dtoa_r+0x8cc>)
 8003166:	f7fd f9b7 	bl	80004d8 <__aeabi_dmul>
 800316a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800316e:	e7bc      	b.n	80030ea <_dtoa_r+0x5d2>
 8003170:	9f03      	ldr	r7, [sp, #12]
 8003172:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800317a:	4640      	mov	r0, r8
 800317c:	4649      	mov	r1, r9
 800317e:	f7fd fad5 	bl	800072c <__aeabi_ddiv>
 8003182:	f7fd fc59 	bl	8000a38 <__aeabi_d2iz>
 8003186:	4604      	mov	r4, r0
 8003188:	f7fd f93c 	bl	8000404 <__aeabi_i2d>
 800318c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003190:	f7fd f9a2 	bl	80004d8 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4640      	mov	r0, r8
 800319a:	4649      	mov	r1, r9
 800319c:	f7fc ffe4 	bl	8000168 <__aeabi_dsub>
 80031a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80031a4:	f807 6b01 	strb.w	r6, [r7], #1
 80031a8:	9e03      	ldr	r6, [sp, #12]
 80031aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80031ae:	1bbe      	subs	r6, r7, r6
 80031b0:	45b4      	cmp	ip, r6
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	d136      	bne.n	8003226 <_dtoa_r+0x70e>
 80031b8:	f7fc ffd8 	bl	800016c <__adddf3>
 80031bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031c0:	4680      	mov	r8, r0
 80031c2:	4689      	mov	r9, r1
 80031c4:	f7fd fc18 	bl	80009f8 <__aeabi_dcmpgt>
 80031c8:	bb58      	cbnz	r0, 8003222 <_dtoa_r+0x70a>
 80031ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031ce:	4640      	mov	r0, r8
 80031d0:	4649      	mov	r1, r9
 80031d2:	f7fd fbe9 	bl	80009a8 <__aeabi_dcmpeq>
 80031d6:	b108      	cbz	r0, 80031dc <_dtoa_r+0x6c4>
 80031d8:	07e1      	lsls	r1, r4, #31
 80031da:	d422      	bmi.n	8003222 <_dtoa_r+0x70a>
 80031dc:	4628      	mov	r0, r5
 80031de:	4659      	mov	r1, fp
 80031e0:	f000 fbea 	bl	80039b8 <_Bfree>
 80031e4:	2300      	movs	r3, #0
 80031e6:	703b      	strb	r3, [r7, #0]
 80031e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80031ea:	f10a 0001 	add.w	r0, sl, #1
 80031ee:	6018      	str	r0, [r3, #0]
 80031f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f43f acde 	beq.w	8002bb4 <_dtoa_r+0x9c>
 80031f8:	601f      	str	r7, [r3, #0]
 80031fa:	e4db      	b.n	8002bb4 <_dtoa_r+0x9c>
 80031fc:	4627      	mov	r7, r4
 80031fe:	463b      	mov	r3, r7
 8003200:	461f      	mov	r7, r3
 8003202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003206:	2a39      	cmp	r2, #57	; 0x39
 8003208:	d107      	bne.n	800321a <_dtoa_r+0x702>
 800320a:	9a03      	ldr	r2, [sp, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d1f7      	bne.n	8003200 <_dtoa_r+0x6e8>
 8003210:	2230      	movs	r2, #48	; 0x30
 8003212:	9903      	ldr	r1, [sp, #12]
 8003214:	f108 0801 	add.w	r8, r8, #1
 8003218:	700a      	strb	r2, [r1, #0]
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	3201      	adds	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e79e      	b.n	8003160 <_dtoa_r+0x648>
 8003222:	46d0      	mov	r8, sl
 8003224:	e7eb      	b.n	80031fe <_dtoa_r+0x6e6>
 8003226:	2200      	movs	r2, #0
 8003228:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <_dtoa_r+0x8cc>)
 800322a:	f7fd f955 	bl	80004d8 <__aeabi_dmul>
 800322e:	2200      	movs	r2, #0
 8003230:	2300      	movs	r3, #0
 8003232:	4680      	mov	r8, r0
 8003234:	4689      	mov	r9, r1
 8003236:	f7fd fbb7 	bl	80009a8 <__aeabi_dcmpeq>
 800323a:	2800      	cmp	r0, #0
 800323c:	d09b      	beq.n	8003176 <_dtoa_r+0x65e>
 800323e:	e7cd      	b.n	80031dc <_dtoa_r+0x6c4>
 8003240:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003242:	2a00      	cmp	r2, #0
 8003244:	f000 80d0 	beq.w	80033e8 <_dtoa_r+0x8d0>
 8003248:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800324a:	2a01      	cmp	r2, #1
 800324c:	f300 80ae 	bgt.w	80033ac <_dtoa_r+0x894>
 8003250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003252:	2a00      	cmp	r2, #0
 8003254:	f000 80a6 	beq.w	80033a4 <_dtoa_r+0x88c>
 8003258:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800325c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800325e:	9f06      	ldr	r7, [sp, #24]
 8003260:	9a06      	ldr	r2, [sp, #24]
 8003262:	2101      	movs	r1, #1
 8003264:	441a      	add	r2, r3
 8003266:	9206      	str	r2, [sp, #24]
 8003268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800326a:	4628      	mov	r0, r5
 800326c:	441a      	add	r2, r3
 800326e:	9209      	str	r2, [sp, #36]	; 0x24
 8003270:	f000 fc58 	bl	8003b24 <__i2b>
 8003274:	4606      	mov	r6, r0
 8003276:	2f00      	cmp	r7, #0
 8003278:	dd0c      	ble.n	8003294 <_dtoa_r+0x77c>
 800327a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	dd09      	ble.n	8003294 <_dtoa_r+0x77c>
 8003280:	42bb      	cmp	r3, r7
 8003282:	bfa8      	it	ge
 8003284:	463b      	movge	r3, r7
 8003286:	9a06      	ldr	r2, [sp, #24]
 8003288:	1aff      	subs	r7, r7, r3
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	9206      	str	r2, [sp, #24]
 800328e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	9309      	str	r3, [sp, #36]	; 0x24
 8003294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003296:	b1f3      	cbz	r3, 80032d6 <_dtoa_r+0x7be>
 8003298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80a8 	beq.w	80033f0 <_dtoa_r+0x8d8>
 80032a0:	2c00      	cmp	r4, #0
 80032a2:	dd10      	ble.n	80032c6 <_dtoa_r+0x7ae>
 80032a4:	4631      	mov	r1, r6
 80032a6:	4622      	mov	r2, r4
 80032a8:	4628      	mov	r0, r5
 80032aa:	f000 fcf9 	bl	8003ca0 <__pow5mult>
 80032ae:	465a      	mov	r2, fp
 80032b0:	4601      	mov	r1, r0
 80032b2:	4606      	mov	r6, r0
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 fc4b 	bl	8003b50 <__multiply>
 80032ba:	4680      	mov	r8, r0
 80032bc:	4659      	mov	r1, fp
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 fb7a 	bl	80039b8 <_Bfree>
 80032c4:	46c3      	mov	fp, r8
 80032c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032c8:	1b1a      	subs	r2, r3, r4
 80032ca:	d004      	beq.n	80032d6 <_dtoa_r+0x7be>
 80032cc:	4659      	mov	r1, fp
 80032ce:	4628      	mov	r0, r5
 80032d0:	f000 fce6 	bl	8003ca0 <__pow5mult>
 80032d4:	4683      	mov	fp, r0
 80032d6:	2101      	movs	r1, #1
 80032d8:	4628      	mov	r0, r5
 80032da:	f000 fc23 	bl	8003b24 <__i2b>
 80032de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032e0:	4604      	mov	r4, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f340 8086 	ble.w	80033f4 <_dtoa_r+0x8dc>
 80032e8:	461a      	mov	r2, r3
 80032ea:	4601      	mov	r1, r0
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 fcd7 	bl	8003ca0 <__pow5mult>
 80032f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032f4:	4604      	mov	r4, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	dd7f      	ble.n	80033fa <_dtoa_r+0x8e2>
 80032fa:	f04f 0800 	mov.w	r8, #0
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003304:	6918      	ldr	r0, [r3, #16]
 8003306:	f000 fbbf 	bl	8003a88 <__hi0bits>
 800330a:	f1c0 0020 	rsb	r0, r0, #32
 800330e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003310:	4418      	add	r0, r3
 8003312:	f010 001f 	ands.w	r0, r0, #31
 8003316:	f000 8092 	beq.w	800343e <_dtoa_r+0x926>
 800331a:	f1c0 0320 	rsb	r3, r0, #32
 800331e:	2b04      	cmp	r3, #4
 8003320:	f340 808a 	ble.w	8003438 <_dtoa_r+0x920>
 8003324:	f1c0 001c 	rsb	r0, r0, #28
 8003328:	9b06      	ldr	r3, [sp, #24]
 800332a:	4407      	add	r7, r0
 800332c:	4403      	add	r3, r0
 800332e:	9306      	str	r3, [sp, #24]
 8003330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003332:	4403      	add	r3, r0
 8003334:	9309      	str	r3, [sp, #36]	; 0x24
 8003336:	9b06      	ldr	r3, [sp, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dd05      	ble.n	8003348 <_dtoa_r+0x830>
 800333c:	4659      	mov	r1, fp
 800333e:	461a      	mov	r2, r3
 8003340:	4628      	mov	r0, r5
 8003342:	f000 fd07 	bl	8003d54 <__lshift>
 8003346:	4683      	mov	fp, r0
 8003348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	dd05      	ble.n	800335a <_dtoa_r+0x842>
 800334e:	4621      	mov	r1, r4
 8003350:	461a      	mov	r2, r3
 8003352:	4628      	mov	r0, r5
 8003354:	f000 fcfe 	bl	8003d54 <__lshift>
 8003358:	4604      	mov	r4, r0
 800335a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d070      	beq.n	8003442 <_dtoa_r+0x92a>
 8003360:	4621      	mov	r1, r4
 8003362:	4658      	mov	r0, fp
 8003364:	f000 fd66 	bl	8003e34 <__mcmp>
 8003368:	2800      	cmp	r0, #0
 800336a:	da6a      	bge.n	8003442 <_dtoa_r+0x92a>
 800336c:	2300      	movs	r3, #0
 800336e:	4659      	mov	r1, fp
 8003370:	220a      	movs	r2, #10
 8003372:	4628      	mov	r0, r5
 8003374:	f000 fb42 	bl	80039fc <__multadd>
 8003378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800337a:	4683      	mov	fp, r0
 800337c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8194 	beq.w	80036ae <_dtoa_r+0xb96>
 8003386:	4631      	mov	r1, r6
 8003388:	2300      	movs	r3, #0
 800338a:	220a      	movs	r2, #10
 800338c:	4628      	mov	r0, r5
 800338e:	f000 fb35 	bl	80039fc <__multadd>
 8003392:	f1b9 0f00 	cmp.w	r9, #0
 8003396:	4606      	mov	r6, r0
 8003398:	f300 8093 	bgt.w	80034c2 <_dtoa_r+0x9aa>
 800339c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800339e:	2b02      	cmp	r3, #2
 80033a0:	dc57      	bgt.n	8003452 <_dtoa_r+0x93a>
 80033a2:	e08e      	b.n	80034c2 <_dtoa_r+0x9aa>
 80033a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80033a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80033aa:	e757      	b.n	800325c <_dtoa_r+0x744>
 80033ac:	9b08      	ldr	r3, [sp, #32]
 80033ae:	1e5c      	subs	r4, r3, #1
 80033b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033b2:	42a3      	cmp	r3, r4
 80033b4:	bfb7      	itett	lt
 80033b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80033b8:	1b1c      	subge	r4, r3, r4
 80033ba:	1ae2      	sublt	r2, r4, r3
 80033bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80033be:	bfbe      	ittt	lt
 80033c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80033c2:	189b      	addlt	r3, r3, r2
 80033c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80033c6:	9b08      	ldr	r3, [sp, #32]
 80033c8:	bfb8      	it	lt
 80033ca:	2400      	movlt	r4, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bfbb      	ittet	lt
 80033d0:	9b06      	ldrlt	r3, [sp, #24]
 80033d2:	9a08      	ldrlt	r2, [sp, #32]
 80033d4:	9f06      	ldrge	r7, [sp, #24]
 80033d6:	1a9f      	sublt	r7, r3, r2
 80033d8:	bfac      	ite	ge
 80033da:	9b08      	ldrge	r3, [sp, #32]
 80033dc:	2300      	movlt	r3, #0
 80033de:	e73f      	b.n	8003260 <_dtoa_r+0x748>
 80033e0:	3fe00000 	.word	0x3fe00000
 80033e4:	40240000 	.word	0x40240000
 80033e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80033ea:	9f06      	ldr	r7, [sp, #24]
 80033ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80033ee:	e742      	b.n	8003276 <_dtoa_r+0x75e>
 80033f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033f2:	e76b      	b.n	80032cc <_dtoa_r+0x7b4>
 80033f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	dc19      	bgt.n	800342e <_dtoa_r+0x916>
 80033fa:	9b04      	ldr	r3, [sp, #16]
 80033fc:	b9bb      	cbnz	r3, 800342e <_dtoa_r+0x916>
 80033fe:	9b05      	ldr	r3, [sp, #20]
 8003400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003404:	b99b      	cbnz	r3, 800342e <_dtoa_r+0x916>
 8003406:	9b05      	ldr	r3, [sp, #20]
 8003408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340c:	0d1b      	lsrs	r3, r3, #20
 800340e:	051b      	lsls	r3, r3, #20
 8003410:	b183      	cbz	r3, 8003434 <_dtoa_r+0x91c>
 8003412:	f04f 0801 	mov.w	r8, #1
 8003416:	9b06      	ldr	r3, [sp, #24]
 8003418:	3301      	adds	r3, #1
 800341a:	9306      	str	r3, [sp, #24]
 800341c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800341e:	3301      	adds	r3, #1
 8003420:	9309      	str	r3, [sp, #36]	; 0x24
 8003422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f af6a 	bne.w	80032fe <_dtoa_r+0x7e6>
 800342a:	2001      	movs	r0, #1
 800342c:	e76f      	b.n	800330e <_dtoa_r+0x7f6>
 800342e:	f04f 0800 	mov.w	r8, #0
 8003432:	e7f6      	b.n	8003422 <_dtoa_r+0x90a>
 8003434:	4698      	mov	r8, r3
 8003436:	e7f4      	b.n	8003422 <_dtoa_r+0x90a>
 8003438:	f43f af7d 	beq.w	8003336 <_dtoa_r+0x81e>
 800343c:	4618      	mov	r0, r3
 800343e:	301c      	adds	r0, #28
 8003440:	e772      	b.n	8003328 <_dtoa_r+0x810>
 8003442:	9b08      	ldr	r3, [sp, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	dc36      	bgt.n	80034b6 <_dtoa_r+0x99e>
 8003448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800344a:	2b02      	cmp	r3, #2
 800344c:	dd33      	ble.n	80034b6 <_dtoa_r+0x99e>
 800344e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003452:	f1b9 0f00 	cmp.w	r9, #0
 8003456:	d10d      	bne.n	8003474 <_dtoa_r+0x95c>
 8003458:	4621      	mov	r1, r4
 800345a:	464b      	mov	r3, r9
 800345c:	2205      	movs	r2, #5
 800345e:	4628      	mov	r0, r5
 8003460:	f000 facc 	bl	80039fc <__multadd>
 8003464:	4601      	mov	r1, r0
 8003466:	4604      	mov	r4, r0
 8003468:	4658      	mov	r0, fp
 800346a:	f000 fce3 	bl	8003e34 <__mcmp>
 800346e:	2800      	cmp	r0, #0
 8003470:	f73f adb8 	bgt.w	8002fe4 <_dtoa_r+0x4cc>
 8003474:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003476:	9f03      	ldr	r7, [sp, #12]
 8003478:	ea6f 0a03 	mvn.w	sl, r3
 800347c:	f04f 0800 	mov.w	r8, #0
 8003480:	4621      	mov	r1, r4
 8003482:	4628      	mov	r0, r5
 8003484:	f000 fa98 	bl	80039b8 <_Bfree>
 8003488:	2e00      	cmp	r6, #0
 800348a:	f43f aea7 	beq.w	80031dc <_dtoa_r+0x6c4>
 800348e:	f1b8 0f00 	cmp.w	r8, #0
 8003492:	d005      	beq.n	80034a0 <_dtoa_r+0x988>
 8003494:	45b0      	cmp	r8, r6
 8003496:	d003      	beq.n	80034a0 <_dtoa_r+0x988>
 8003498:	4641      	mov	r1, r8
 800349a:	4628      	mov	r0, r5
 800349c:	f000 fa8c 	bl	80039b8 <_Bfree>
 80034a0:	4631      	mov	r1, r6
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 fa88 	bl	80039b8 <_Bfree>
 80034a8:	e698      	b.n	80031dc <_dtoa_r+0x6c4>
 80034aa:	2400      	movs	r4, #0
 80034ac:	4626      	mov	r6, r4
 80034ae:	e7e1      	b.n	8003474 <_dtoa_r+0x95c>
 80034b0:	46c2      	mov	sl, r8
 80034b2:	4626      	mov	r6, r4
 80034b4:	e596      	b.n	8002fe4 <_dtoa_r+0x4cc>
 80034b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80fd 	beq.w	80036bc <_dtoa_r+0xba4>
 80034c2:	2f00      	cmp	r7, #0
 80034c4:	dd05      	ble.n	80034d2 <_dtoa_r+0x9ba>
 80034c6:	4631      	mov	r1, r6
 80034c8:	463a      	mov	r2, r7
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 fc42 	bl	8003d54 <__lshift>
 80034d0:	4606      	mov	r6, r0
 80034d2:	f1b8 0f00 	cmp.w	r8, #0
 80034d6:	d05c      	beq.n	8003592 <_dtoa_r+0xa7a>
 80034d8:	4628      	mov	r0, r5
 80034da:	6871      	ldr	r1, [r6, #4]
 80034dc:	f000 fa2c 	bl	8003938 <_Balloc>
 80034e0:	4607      	mov	r7, r0
 80034e2:	b928      	cbnz	r0, 80034f0 <_dtoa_r+0x9d8>
 80034e4:	4602      	mov	r2, r0
 80034e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80034ea:	4b7f      	ldr	r3, [pc, #508]	; (80036e8 <_dtoa_r+0xbd0>)
 80034ec:	f7ff bb28 	b.w	8002b40 <_dtoa_r+0x28>
 80034f0:	6932      	ldr	r2, [r6, #16]
 80034f2:	f106 010c 	add.w	r1, r6, #12
 80034f6:	3202      	adds	r2, #2
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	300c      	adds	r0, #12
 80034fc:	f000 fa0e 	bl	800391c <memcpy>
 8003500:	2201      	movs	r2, #1
 8003502:	4639      	mov	r1, r7
 8003504:	4628      	mov	r0, r5
 8003506:	f000 fc25 	bl	8003d54 <__lshift>
 800350a:	46b0      	mov	r8, r6
 800350c:	4606      	mov	r6, r0
 800350e:	9b03      	ldr	r3, [sp, #12]
 8003510:	3301      	adds	r3, #1
 8003512:	9308      	str	r3, [sp, #32]
 8003514:	9b03      	ldr	r3, [sp, #12]
 8003516:	444b      	add	r3, r9
 8003518:	930a      	str	r3, [sp, #40]	; 0x28
 800351a:	9b04      	ldr	r3, [sp, #16]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	9309      	str	r3, [sp, #36]	; 0x24
 8003522:	9b08      	ldr	r3, [sp, #32]
 8003524:	4621      	mov	r1, r4
 8003526:	3b01      	subs	r3, #1
 8003528:	4658      	mov	r0, fp
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	f7ff fa66 	bl	80029fc <quorem>
 8003530:	4603      	mov	r3, r0
 8003532:	4641      	mov	r1, r8
 8003534:	3330      	adds	r3, #48	; 0x30
 8003536:	9006      	str	r0, [sp, #24]
 8003538:	4658      	mov	r0, fp
 800353a:	930b      	str	r3, [sp, #44]	; 0x2c
 800353c:	f000 fc7a 	bl	8003e34 <__mcmp>
 8003540:	4632      	mov	r2, r6
 8003542:	4681      	mov	r9, r0
 8003544:	4621      	mov	r1, r4
 8003546:	4628      	mov	r0, r5
 8003548:	f000 fc90 	bl	8003e6c <__mdiff>
 800354c:	68c2      	ldr	r2, [r0, #12]
 800354e:	4607      	mov	r7, r0
 8003550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003552:	bb02      	cbnz	r2, 8003596 <_dtoa_r+0xa7e>
 8003554:	4601      	mov	r1, r0
 8003556:	4658      	mov	r0, fp
 8003558:	f000 fc6c 	bl	8003e34 <__mcmp>
 800355c:	4602      	mov	r2, r0
 800355e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003560:	4639      	mov	r1, r7
 8003562:	4628      	mov	r0, r5
 8003564:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003568:	f000 fa26 	bl	80039b8 <_Bfree>
 800356c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800356e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003570:	9f08      	ldr	r7, [sp, #32]
 8003572:	ea43 0102 	orr.w	r1, r3, r2
 8003576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003578:	430b      	orrs	r3, r1
 800357a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800357c:	d10d      	bne.n	800359a <_dtoa_r+0xa82>
 800357e:	2b39      	cmp	r3, #57	; 0x39
 8003580:	d029      	beq.n	80035d6 <_dtoa_r+0xabe>
 8003582:	f1b9 0f00 	cmp.w	r9, #0
 8003586:	dd01      	ble.n	800358c <_dtoa_r+0xa74>
 8003588:	9b06      	ldr	r3, [sp, #24]
 800358a:	3331      	adds	r3, #49	; 0x31
 800358c:	9a04      	ldr	r2, [sp, #16]
 800358e:	7013      	strb	r3, [r2, #0]
 8003590:	e776      	b.n	8003480 <_dtoa_r+0x968>
 8003592:	4630      	mov	r0, r6
 8003594:	e7b9      	b.n	800350a <_dtoa_r+0x9f2>
 8003596:	2201      	movs	r2, #1
 8003598:	e7e2      	b.n	8003560 <_dtoa_r+0xa48>
 800359a:	f1b9 0f00 	cmp.w	r9, #0
 800359e:	db06      	blt.n	80035ae <_dtoa_r+0xa96>
 80035a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80035a2:	ea41 0909 	orr.w	r9, r1, r9
 80035a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035a8:	ea59 0101 	orrs.w	r1, r9, r1
 80035ac:	d120      	bne.n	80035f0 <_dtoa_r+0xad8>
 80035ae:	2a00      	cmp	r2, #0
 80035b0:	ddec      	ble.n	800358c <_dtoa_r+0xa74>
 80035b2:	4659      	mov	r1, fp
 80035b4:	2201      	movs	r2, #1
 80035b6:	4628      	mov	r0, r5
 80035b8:	9308      	str	r3, [sp, #32]
 80035ba:	f000 fbcb 	bl	8003d54 <__lshift>
 80035be:	4621      	mov	r1, r4
 80035c0:	4683      	mov	fp, r0
 80035c2:	f000 fc37 	bl	8003e34 <__mcmp>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	9b08      	ldr	r3, [sp, #32]
 80035ca:	dc02      	bgt.n	80035d2 <_dtoa_r+0xaba>
 80035cc:	d1de      	bne.n	800358c <_dtoa_r+0xa74>
 80035ce:	07da      	lsls	r2, r3, #31
 80035d0:	d5dc      	bpl.n	800358c <_dtoa_r+0xa74>
 80035d2:	2b39      	cmp	r3, #57	; 0x39
 80035d4:	d1d8      	bne.n	8003588 <_dtoa_r+0xa70>
 80035d6:	2339      	movs	r3, #57	; 0x39
 80035d8:	9a04      	ldr	r2, [sp, #16]
 80035da:	7013      	strb	r3, [r2, #0]
 80035dc:	463b      	mov	r3, r7
 80035de:	461f      	mov	r7, r3
 80035e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	2a39      	cmp	r2, #57	; 0x39
 80035e8:	d050      	beq.n	800368c <_dtoa_r+0xb74>
 80035ea:	3201      	adds	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e747      	b.n	8003480 <_dtoa_r+0x968>
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	dd03      	ble.n	80035fc <_dtoa_r+0xae4>
 80035f4:	2b39      	cmp	r3, #57	; 0x39
 80035f6:	d0ee      	beq.n	80035d6 <_dtoa_r+0xabe>
 80035f8:	3301      	adds	r3, #1
 80035fa:	e7c7      	b.n	800358c <_dtoa_r+0xa74>
 80035fc:	9a08      	ldr	r2, [sp, #32]
 80035fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003600:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003604:	428a      	cmp	r2, r1
 8003606:	d02a      	beq.n	800365e <_dtoa_r+0xb46>
 8003608:	4659      	mov	r1, fp
 800360a:	2300      	movs	r3, #0
 800360c:	220a      	movs	r2, #10
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f9f4 	bl	80039fc <__multadd>
 8003614:	45b0      	cmp	r8, r6
 8003616:	4683      	mov	fp, r0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f04f 020a 	mov.w	r2, #10
 8003620:	4641      	mov	r1, r8
 8003622:	4628      	mov	r0, r5
 8003624:	d107      	bne.n	8003636 <_dtoa_r+0xb1e>
 8003626:	f000 f9e9 	bl	80039fc <__multadd>
 800362a:	4680      	mov	r8, r0
 800362c:	4606      	mov	r6, r0
 800362e:	9b08      	ldr	r3, [sp, #32]
 8003630:	3301      	adds	r3, #1
 8003632:	9308      	str	r3, [sp, #32]
 8003634:	e775      	b.n	8003522 <_dtoa_r+0xa0a>
 8003636:	f000 f9e1 	bl	80039fc <__multadd>
 800363a:	4631      	mov	r1, r6
 800363c:	4680      	mov	r8, r0
 800363e:	2300      	movs	r3, #0
 8003640:	220a      	movs	r2, #10
 8003642:	4628      	mov	r0, r5
 8003644:	f000 f9da 	bl	80039fc <__multadd>
 8003648:	4606      	mov	r6, r0
 800364a:	e7f0      	b.n	800362e <_dtoa_r+0xb16>
 800364c:	f1b9 0f00 	cmp.w	r9, #0
 8003650:	bfcc      	ite	gt
 8003652:	464f      	movgt	r7, r9
 8003654:	2701      	movle	r7, #1
 8003656:	f04f 0800 	mov.w	r8, #0
 800365a:	9a03      	ldr	r2, [sp, #12]
 800365c:	4417      	add	r7, r2
 800365e:	4659      	mov	r1, fp
 8003660:	2201      	movs	r2, #1
 8003662:	4628      	mov	r0, r5
 8003664:	9308      	str	r3, [sp, #32]
 8003666:	f000 fb75 	bl	8003d54 <__lshift>
 800366a:	4621      	mov	r1, r4
 800366c:	4683      	mov	fp, r0
 800366e:	f000 fbe1 	bl	8003e34 <__mcmp>
 8003672:	2800      	cmp	r0, #0
 8003674:	dcb2      	bgt.n	80035dc <_dtoa_r+0xac4>
 8003676:	d102      	bne.n	800367e <_dtoa_r+0xb66>
 8003678:	9b08      	ldr	r3, [sp, #32]
 800367a:	07db      	lsls	r3, r3, #31
 800367c:	d4ae      	bmi.n	80035dc <_dtoa_r+0xac4>
 800367e:	463b      	mov	r3, r7
 8003680:	461f      	mov	r7, r3
 8003682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003686:	2a30      	cmp	r2, #48	; 0x30
 8003688:	d0fa      	beq.n	8003680 <_dtoa_r+0xb68>
 800368a:	e6f9      	b.n	8003480 <_dtoa_r+0x968>
 800368c:	9a03      	ldr	r2, [sp, #12]
 800368e:	429a      	cmp	r2, r3
 8003690:	d1a5      	bne.n	80035de <_dtoa_r+0xac6>
 8003692:	2331      	movs	r3, #49	; 0x31
 8003694:	f10a 0a01 	add.w	sl, sl, #1
 8003698:	e779      	b.n	800358e <_dtoa_r+0xa76>
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <_dtoa_r+0xbd4>)
 800369c:	f7ff baa8 	b.w	8002bf0 <_dtoa_r+0xd8>
 80036a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f47f aa81 	bne.w	8002baa <_dtoa_r+0x92>
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <_dtoa_r+0xbd8>)
 80036aa:	f7ff baa1 	b.w	8002bf0 <_dtoa_r+0xd8>
 80036ae:	f1b9 0f00 	cmp.w	r9, #0
 80036b2:	dc03      	bgt.n	80036bc <_dtoa_r+0xba4>
 80036b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	f73f aecb 	bgt.w	8003452 <_dtoa_r+0x93a>
 80036bc:	9f03      	ldr	r7, [sp, #12]
 80036be:	4621      	mov	r1, r4
 80036c0:	4658      	mov	r0, fp
 80036c2:	f7ff f99b 	bl	80029fc <quorem>
 80036c6:	9a03      	ldr	r2, [sp, #12]
 80036c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80036cc:	f807 3b01 	strb.w	r3, [r7], #1
 80036d0:	1aba      	subs	r2, r7, r2
 80036d2:	4591      	cmp	r9, r2
 80036d4:	ddba      	ble.n	800364c <_dtoa_r+0xb34>
 80036d6:	4659      	mov	r1, fp
 80036d8:	2300      	movs	r3, #0
 80036da:	220a      	movs	r2, #10
 80036dc:	4628      	mov	r0, r5
 80036de:	f000 f98d 	bl	80039fc <__multadd>
 80036e2:	4683      	mov	fp, r0
 80036e4:	e7eb      	b.n	80036be <_dtoa_r+0xba6>
 80036e6:	bf00      	nop
 80036e8:	08004c67 	.word	0x08004c67
 80036ec:	08004bc4 	.word	0x08004bc4
 80036f0:	08004be8 	.word	0x08004be8

080036f4 <std>:
 80036f4:	2300      	movs	r3, #0
 80036f6:	b510      	push	{r4, lr}
 80036f8:	4604      	mov	r4, r0
 80036fa:	e9c0 3300 	strd	r3, r3, [r0]
 80036fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003702:	6083      	str	r3, [r0, #8]
 8003704:	8181      	strh	r1, [r0, #12]
 8003706:	6643      	str	r3, [r0, #100]	; 0x64
 8003708:	81c2      	strh	r2, [r0, #14]
 800370a:	6183      	str	r3, [r0, #24]
 800370c:	4619      	mov	r1, r3
 800370e:	2208      	movs	r2, #8
 8003710:	305c      	adds	r0, #92	; 0x5c
 8003712:	f7fe fcf3 	bl	80020fc <memset>
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <std+0x38>)
 8003718:	6224      	str	r4, [r4, #32]
 800371a:	6263      	str	r3, [r4, #36]	; 0x24
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <std+0x3c>)
 800371e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <std+0x40>)
 8003722:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <std+0x44>)
 8003726:	6323      	str	r3, [r4, #48]	; 0x30
 8003728:	bd10      	pop	{r4, pc}
 800372a:	bf00      	nop
 800372c:	080044ed 	.word	0x080044ed
 8003730:	0800450f 	.word	0x0800450f
 8003734:	08004547 	.word	0x08004547
 8003738:	0800456b 	.word	0x0800456b

0800373c <_cleanup_r>:
 800373c:	4901      	ldr	r1, [pc, #4]	; (8003744 <_cleanup_r+0x8>)
 800373e:	f000 b8af 	b.w	80038a0 <_fwalk_reent>
 8003742:	bf00      	nop
 8003744:	08004879 	.word	0x08004879

08003748 <__sfmoreglue>:
 8003748:	2268      	movs	r2, #104	; 0x68
 800374a:	b570      	push	{r4, r5, r6, lr}
 800374c:	1e4d      	subs	r5, r1, #1
 800374e:	4355      	muls	r5, r2
 8003750:	460e      	mov	r6, r1
 8003752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003756:	f000 fced 	bl	8004134 <_malloc_r>
 800375a:	4604      	mov	r4, r0
 800375c:	b140      	cbz	r0, 8003770 <__sfmoreglue+0x28>
 800375e:	2100      	movs	r1, #0
 8003760:	e9c0 1600 	strd	r1, r6, [r0]
 8003764:	300c      	adds	r0, #12
 8003766:	60a0      	str	r0, [r4, #8]
 8003768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800376c:	f7fe fcc6 	bl	80020fc <memset>
 8003770:	4620      	mov	r0, r4
 8003772:	bd70      	pop	{r4, r5, r6, pc}

08003774 <__sfp_lock_acquire>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sfp_lock_acquire+0x8>)
 8003776:	f000 b8b8 	b.w	80038ea <__retarget_lock_acquire_recursive>
 800377a:	bf00      	nop
 800377c:	20000245 	.word	0x20000245

08003780 <__sfp_lock_release>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sfp_lock_release+0x8>)
 8003782:	f000 b8b3 	b.w	80038ec <__retarget_lock_release_recursive>
 8003786:	bf00      	nop
 8003788:	20000245 	.word	0x20000245

0800378c <__sinit_lock_acquire>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__sinit_lock_acquire+0x8>)
 800378e:	f000 b8ac 	b.w	80038ea <__retarget_lock_acquire_recursive>
 8003792:	bf00      	nop
 8003794:	20000246 	.word	0x20000246

08003798 <__sinit_lock_release>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__sinit_lock_release+0x8>)
 800379a:	f000 b8a7 	b.w	80038ec <__retarget_lock_release_recursive>
 800379e:	bf00      	nop
 80037a0:	20000246 	.word	0x20000246

080037a4 <__sinit>:
 80037a4:	b510      	push	{r4, lr}
 80037a6:	4604      	mov	r4, r0
 80037a8:	f7ff fff0 	bl	800378c <__sinit_lock_acquire>
 80037ac:	69a3      	ldr	r3, [r4, #24]
 80037ae:	b11b      	cbz	r3, 80037b8 <__sinit+0x14>
 80037b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b4:	f7ff bff0 	b.w	8003798 <__sinit_lock_release>
 80037b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037bc:	6523      	str	r3, [r4, #80]	; 0x50
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <__sinit+0x68>)
 80037c0:	4a13      	ldr	r2, [pc, #76]	; (8003810 <__sinit+0x6c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80037c6:	42a3      	cmp	r3, r4
 80037c8:	bf08      	it	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	4620      	mov	r0, r4
 80037ce:	bf08      	it	eq
 80037d0:	61a3      	streq	r3, [r4, #24]
 80037d2:	f000 f81f 	bl	8003814 <__sfp>
 80037d6:	6060      	str	r0, [r4, #4]
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 f81b 	bl	8003814 <__sfp>
 80037de:	60a0      	str	r0, [r4, #8]
 80037e0:	4620      	mov	r0, r4
 80037e2:	f000 f817 	bl	8003814 <__sfp>
 80037e6:	2200      	movs	r2, #0
 80037e8:	2104      	movs	r1, #4
 80037ea:	60e0      	str	r0, [r4, #12]
 80037ec:	6860      	ldr	r0, [r4, #4]
 80037ee:	f7ff ff81 	bl	80036f4 <std>
 80037f2:	2201      	movs	r2, #1
 80037f4:	2109      	movs	r1, #9
 80037f6:	68a0      	ldr	r0, [r4, #8]
 80037f8:	f7ff ff7c 	bl	80036f4 <std>
 80037fc:	2202      	movs	r2, #2
 80037fe:	2112      	movs	r1, #18
 8003800:	68e0      	ldr	r0, [r4, #12]
 8003802:	f7ff ff77 	bl	80036f4 <std>
 8003806:	2301      	movs	r3, #1
 8003808:	61a3      	str	r3, [r4, #24]
 800380a:	e7d1      	b.n	80037b0 <__sinit+0xc>
 800380c:	08004bb0 	.word	0x08004bb0
 8003810:	0800373d 	.word	0x0800373d

08003814 <__sfp>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	4607      	mov	r7, r0
 8003818:	f7ff ffac 	bl	8003774 <__sfp_lock_acquire>
 800381c:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <__sfp+0x84>)
 800381e:	681e      	ldr	r6, [r3, #0]
 8003820:	69b3      	ldr	r3, [r6, #24]
 8003822:	b913      	cbnz	r3, 800382a <__sfp+0x16>
 8003824:	4630      	mov	r0, r6
 8003826:	f7ff ffbd 	bl	80037a4 <__sinit>
 800382a:	3648      	adds	r6, #72	; 0x48
 800382c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003830:	3b01      	subs	r3, #1
 8003832:	d503      	bpl.n	800383c <__sfp+0x28>
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	b30b      	cbz	r3, 800387c <__sfp+0x68>
 8003838:	6836      	ldr	r6, [r6, #0]
 800383a:	e7f7      	b.n	800382c <__sfp+0x18>
 800383c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003840:	b9d5      	cbnz	r5, 8003878 <__sfp+0x64>
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <__sfp+0x88>)
 8003844:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003848:	60e3      	str	r3, [r4, #12]
 800384a:	6665      	str	r5, [r4, #100]	; 0x64
 800384c:	f000 f84c 	bl	80038e8 <__retarget_lock_init_recursive>
 8003850:	f7ff ff96 	bl	8003780 <__sfp_lock_release>
 8003854:	2208      	movs	r2, #8
 8003856:	4629      	mov	r1, r5
 8003858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800385c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003860:	6025      	str	r5, [r4, #0]
 8003862:	61a5      	str	r5, [r4, #24]
 8003864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003868:	f7fe fc48 	bl	80020fc <memset>
 800386c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003874:	4620      	mov	r0, r4
 8003876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003878:	3468      	adds	r4, #104	; 0x68
 800387a:	e7d9      	b.n	8003830 <__sfp+0x1c>
 800387c:	2104      	movs	r1, #4
 800387e:	4638      	mov	r0, r7
 8003880:	f7ff ff62 	bl	8003748 <__sfmoreglue>
 8003884:	4604      	mov	r4, r0
 8003886:	6030      	str	r0, [r6, #0]
 8003888:	2800      	cmp	r0, #0
 800388a:	d1d5      	bne.n	8003838 <__sfp+0x24>
 800388c:	f7ff ff78 	bl	8003780 <__sfp_lock_release>
 8003890:	230c      	movs	r3, #12
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	e7ee      	b.n	8003874 <__sfp+0x60>
 8003896:	bf00      	nop
 8003898:	08004bb0 	.word	0x08004bb0
 800389c:	ffff0001 	.word	0xffff0001

080038a0 <_fwalk_reent>:
 80038a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a4:	4606      	mov	r6, r0
 80038a6:	4688      	mov	r8, r1
 80038a8:	2700      	movs	r7, #0
 80038aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038b2:	f1b9 0901 	subs.w	r9, r9, #1
 80038b6:	d505      	bpl.n	80038c4 <_fwalk_reent+0x24>
 80038b8:	6824      	ldr	r4, [r4, #0]
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	d1f7      	bne.n	80038ae <_fwalk_reent+0xe>
 80038be:	4638      	mov	r0, r7
 80038c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c4:	89ab      	ldrh	r3, [r5, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d907      	bls.n	80038da <_fwalk_reent+0x3a>
 80038ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038ce:	3301      	adds	r3, #1
 80038d0:	d003      	beq.n	80038da <_fwalk_reent+0x3a>
 80038d2:	4629      	mov	r1, r5
 80038d4:	4630      	mov	r0, r6
 80038d6:	47c0      	blx	r8
 80038d8:	4307      	orrs	r7, r0
 80038da:	3568      	adds	r5, #104	; 0x68
 80038dc:	e7e9      	b.n	80038b2 <_fwalk_reent+0x12>
	...

080038e0 <_localeconv_r>:
 80038e0:	4800      	ldr	r0, [pc, #0]	; (80038e4 <_localeconv_r+0x4>)
 80038e2:	4770      	bx	lr
 80038e4:	20000160 	.word	0x20000160

080038e8 <__retarget_lock_init_recursive>:
 80038e8:	4770      	bx	lr

080038ea <__retarget_lock_acquire_recursive>:
 80038ea:	4770      	bx	lr

080038ec <__retarget_lock_release_recursive>:
 80038ec:	4770      	bx	lr
	...

080038f0 <malloc>:
 80038f0:	4b02      	ldr	r3, [pc, #8]	; (80038fc <malloc+0xc>)
 80038f2:	4601      	mov	r1, r0
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	f000 bc1d 	b.w	8004134 <_malloc_r>
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c

08003900 <memchr>:
 8003900:	4603      	mov	r3, r0
 8003902:	b510      	push	{r4, lr}
 8003904:	b2c9      	uxtb	r1, r1
 8003906:	4402      	add	r2, r0
 8003908:	4293      	cmp	r3, r2
 800390a:	4618      	mov	r0, r3
 800390c:	d101      	bne.n	8003912 <memchr+0x12>
 800390e:	2000      	movs	r0, #0
 8003910:	e003      	b.n	800391a <memchr+0x1a>
 8003912:	7804      	ldrb	r4, [r0, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	428c      	cmp	r4, r1
 8003918:	d1f6      	bne.n	8003908 <memchr+0x8>
 800391a:	bd10      	pop	{r4, pc}

0800391c <memcpy>:
 800391c:	440a      	add	r2, r1
 800391e:	4291      	cmp	r1, r2
 8003920:	f100 33ff 	add.w	r3, r0, #4294967295
 8003924:	d100      	bne.n	8003928 <memcpy+0xc>
 8003926:	4770      	bx	lr
 8003928:	b510      	push	{r4, lr}
 800392a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392e:	4291      	cmp	r1, r2
 8003930:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003934:	d1f9      	bne.n	800392a <memcpy+0xe>
 8003936:	bd10      	pop	{r4, pc}

08003938 <_Balloc>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800393c:	4604      	mov	r4, r0
 800393e:	460d      	mov	r5, r1
 8003940:	b976      	cbnz	r6, 8003960 <_Balloc+0x28>
 8003942:	2010      	movs	r0, #16
 8003944:	f7ff ffd4 	bl	80038f0 <malloc>
 8003948:	4602      	mov	r2, r0
 800394a:	6260      	str	r0, [r4, #36]	; 0x24
 800394c:	b920      	cbnz	r0, 8003958 <_Balloc+0x20>
 800394e:	2166      	movs	r1, #102	; 0x66
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <_Balloc+0x78>)
 8003952:	4818      	ldr	r0, [pc, #96]	; (80039b4 <_Balloc+0x7c>)
 8003954:	f000 fee0 	bl	8004718 <__assert_func>
 8003958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800395c:	6006      	str	r6, [r0, #0]
 800395e:	60c6      	str	r6, [r0, #12]
 8003960:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003962:	68f3      	ldr	r3, [r6, #12]
 8003964:	b183      	cbz	r3, 8003988 <_Balloc+0x50>
 8003966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800396e:	b9b8      	cbnz	r0, 80039a0 <_Balloc+0x68>
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f605 	lsl.w	r6, r1, r5
 8003976:	1d72      	adds	r2, r6, #5
 8003978:	4620      	mov	r0, r4
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	f000 fb5e 	bl	800403c <_calloc_r>
 8003980:	b160      	cbz	r0, 800399c <_Balloc+0x64>
 8003982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003986:	e00e      	b.n	80039a6 <_Balloc+0x6e>
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	2104      	movs	r1, #4
 800398c:	4620      	mov	r0, r4
 800398e:	f000 fb55 	bl	800403c <_calloc_r>
 8003992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003994:	60f0      	str	r0, [r6, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e4      	bne.n	8003966 <_Balloc+0x2e>
 800399c:	2000      	movs	r0, #0
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	6802      	ldr	r2, [r0, #0]
 80039a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80039a6:	2300      	movs	r3, #0
 80039a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80039ac:	e7f7      	b.n	800399e <_Balloc+0x66>
 80039ae:	bf00      	nop
 80039b0:	08004bf5 	.word	0x08004bf5
 80039b4:	08004cd8 	.word	0x08004cd8

080039b8 <_Bfree>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80039bc:	4605      	mov	r5, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	b976      	cbnz	r6, 80039e0 <_Bfree+0x28>
 80039c2:	2010      	movs	r0, #16
 80039c4:	f7ff ff94 	bl	80038f0 <malloc>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6268      	str	r0, [r5, #36]	; 0x24
 80039cc:	b920      	cbnz	r0, 80039d8 <_Bfree+0x20>
 80039ce:	218a      	movs	r1, #138	; 0x8a
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <_Bfree+0x3c>)
 80039d2:	4809      	ldr	r0, [pc, #36]	; (80039f8 <_Bfree+0x40>)
 80039d4:	f000 fea0 	bl	8004718 <__assert_func>
 80039d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039dc:	6006      	str	r6, [r0, #0]
 80039de:	60c6      	str	r6, [r0, #12]
 80039e0:	b13c      	cbz	r4, 80039f2 <_Bfree+0x3a>
 80039e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039ec:	6021      	str	r1, [r4, #0]
 80039ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	08004bf5 	.word	0x08004bf5
 80039f8:	08004cd8 	.word	0x08004cd8

080039fc <__multadd>:
 80039fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a00:	4607      	mov	r7, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	461e      	mov	r6, r3
 8003a06:	2000      	movs	r0, #0
 8003a08:	690d      	ldr	r5, [r1, #16]
 8003a0a:	f101 0c14 	add.w	ip, r1, #20
 8003a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8003a12:	3001      	adds	r0, #1
 8003a14:	b299      	uxth	r1, r3
 8003a16:	fb02 6101 	mla	r1, r2, r1, r6
 8003a1a:	0c1e      	lsrs	r6, r3, #16
 8003a1c:	0c0b      	lsrs	r3, r1, #16
 8003a1e:	fb02 3306 	mla	r3, r2, r6, r3
 8003a22:	b289      	uxth	r1, r1
 8003a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003a28:	4285      	cmp	r5, r0
 8003a2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003a2e:	f84c 1b04 	str.w	r1, [ip], #4
 8003a32:	dcec      	bgt.n	8003a0e <__multadd+0x12>
 8003a34:	b30e      	cbz	r6, 8003a7a <__multadd+0x7e>
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	42ab      	cmp	r3, r5
 8003a3a:	dc19      	bgt.n	8003a70 <__multadd+0x74>
 8003a3c:	6861      	ldr	r1, [r4, #4]
 8003a3e:	4638      	mov	r0, r7
 8003a40:	3101      	adds	r1, #1
 8003a42:	f7ff ff79 	bl	8003938 <_Balloc>
 8003a46:	4680      	mov	r8, r0
 8003a48:	b928      	cbnz	r0, 8003a56 <__multadd+0x5a>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	21b5      	movs	r1, #181	; 0xb5
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <__multadd+0x84>)
 8003a50:	480c      	ldr	r0, [pc, #48]	; (8003a84 <__multadd+0x88>)
 8003a52:	f000 fe61 	bl	8004718 <__assert_func>
 8003a56:	6922      	ldr	r2, [r4, #16]
 8003a58:	f104 010c 	add.w	r1, r4, #12
 8003a5c:	3202      	adds	r2, #2
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	300c      	adds	r0, #12
 8003a62:	f7ff ff5b 	bl	800391c <memcpy>
 8003a66:	4621      	mov	r1, r4
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7ff ffa5 	bl	80039b8 <_Bfree>
 8003a6e:	4644      	mov	r4, r8
 8003a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003a74:	3501      	adds	r5, #1
 8003a76:	615e      	str	r6, [r3, #20]
 8003a78:	6125      	str	r5, [r4, #16]
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a80:	08004c67 	.word	0x08004c67
 8003a84:	08004cd8 	.word	0x08004cd8

08003a88 <__hi0bits>:
 8003a88:	0c02      	lsrs	r2, r0, #16
 8003a8a:	0412      	lsls	r2, r2, #16
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	b9ca      	cbnz	r2, 8003ac4 <__hi0bits+0x3c>
 8003a90:	0403      	lsls	r3, r0, #16
 8003a92:	2010      	movs	r0, #16
 8003a94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003a98:	bf04      	itt	eq
 8003a9a:	021b      	lsleq	r3, r3, #8
 8003a9c:	3008      	addeq	r0, #8
 8003a9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003aa2:	bf04      	itt	eq
 8003aa4:	011b      	lsleq	r3, r3, #4
 8003aa6:	3004      	addeq	r0, #4
 8003aa8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003aac:	bf04      	itt	eq
 8003aae:	009b      	lsleq	r3, r3, #2
 8003ab0:	3002      	addeq	r0, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db05      	blt.n	8003ac2 <__hi0bits+0x3a>
 8003ab6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003aba:	f100 0001 	add.w	r0, r0, #1
 8003abe:	bf08      	it	eq
 8003ac0:	2020      	moveq	r0, #32
 8003ac2:	4770      	bx	lr
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e7e5      	b.n	8003a94 <__hi0bits+0xc>

08003ac8 <__lo0bits>:
 8003ac8:	6803      	ldr	r3, [r0, #0]
 8003aca:	4602      	mov	r2, r0
 8003acc:	f013 0007 	ands.w	r0, r3, #7
 8003ad0:	d00b      	beq.n	8003aea <__lo0bits+0x22>
 8003ad2:	07d9      	lsls	r1, r3, #31
 8003ad4:	d421      	bmi.n	8003b1a <__lo0bits+0x52>
 8003ad6:	0798      	lsls	r0, r3, #30
 8003ad8:	bf49      	itett	mi
 8003ada:	085b      	lsrmi	r3, r3, #1
 8003adc:	089b      	lsrpl	r3, r3, #2
 8003ade:	2001      	movmi	r0, #1
 8003ae0:	6013      	strmi	r3, [r2, #0]
 8003ae2:	bf5c      	itt	pl
 8003ae4:	2002      	movpl	r0, #2
 8003ae6:	6013      	strpl	r3, [r2, #0]
 8003ae8:	4770      	bx	lr
 8003aea:	b299      	uxth	r1, r3
 8003aec:	b909      	cbnz	r1, 8003af2 <__lo0bits+0x2a>
 8003aee:	2010      	movs	r0, #16
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	b2d9      	uxtb	r1, r3
 8003af4:	b909      	cbnz	r1, 8003afa <__lo0bits+0x32>
 8003af6:	3008      	adds	r0, #8
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	0719      	lsls	r1, r3, #28
 8003afc:	bf04      	itt	eq
 8003afe:	091b      	lsreq	r3, r3, #4
 8003b00:	3004      	addeq	r0, #4
 8003b02:	0799      	lsls	r1, r3, #30
 8003b04:	bf04      	itt	eq
 8003b06:	089b      	lsreq	r3, r3, #2
 8003b08:	3002      	addeq	r0, #2
 8003b0a:	07d9      	lsls	r1, r3, #31
 8003b0c:	d403      	bmi.n	8003b16 <__lo0bits+0x4e>
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	f100 0001 	add.w	r0, r0, #1
 8003b14:	d003      	beq.n	8003b1e <__lo0bits+0x56>
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	4770      	bx	lr
 8003b1e:	2020      	movs	r0, #32
 8003b20:	4770      	bx	lr
	...

08003b24 <__i2b>:
 8003b24:	b510      	push	{r4, lr}
 8003b26:	460c      	mov	r4, r1
 8003b28:	2101      	movs	r1, #1
 8003b2a:	f7ff ff05 	bl	8003938 <_Balloc>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	b928      	cbnz	r0, 8003b3e <__i2b+0x1a>
 8003b32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b36:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <__i2b+0x24>)
 8003b38:	4804      	ldr	r0, [pc, #16]	; (8003b4c <__i2b+0x28>)
 8003b3a:	f000 fded 	bl	8004718 <__assert_func>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	6144      	str	r4, [r0, #20]
 8003b42:	6103      	str	r3, [r0, #16]
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	08004c67 	.word	0x08004c67
 8003b4c:	08004cd8 	.word	0x08004cd8

08003b50 <__multiply>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	4691      	mov	r9, r2
 8003b56:	690a      	ldr	r2, [r1, #16]
 8003b58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	bfbe      	ittt	lt
 8003b62:	460b      	movlt	r3, r1
 8003b64:	464c      	movlt	r4, r9
 8003b66:	4699      	movlt	r9, r3
 8003b68:	6927      	ldr	r7, [r4, #16]
 8003b6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	6861      	ldr	r1, [r4, #4]
 8003b72:	eb07 060a 	add.w	r6, r7, sl
 8003b76:	42b3      	cmp	r3, r6
 8003b78:	b085      	sub	sp, #20
 8003b7a:	bfb8      	it	lt
 8003b7c:	3101      	addlt	r1, #1
 8003b7e:	f7ff fedb 	bl	8003938 <_Balloc>
 8003b82:	b930      	cbnz	r0, 8003b92 <__multiply+0x42>
 8003b84:	4602      	mov	r2, r0
 8003b86:	f240 115d 	movw	r1, #349	; 0x15d
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <__multiply+0x148>)
 8003b8c:	4843      	ldr	r0, [pc, #268]	; (8003c9c <__multiply+0x14c>)
 8003b8e:	f000 fdc3 	bl	8004718 <__assert_func>
 8003b92:	f100 0514 	add.w	r5, r0, #20
 8003b96:	462b      	mov	r3, r5
 8003b98:	2200      	movs	r2, #0
 8003b9a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b9e:	4543      	cmp	r3, r8
 8003ba0:	d321      	bcc.n	8003be6 <__multiply+0x96>
 8003ba2:	f104 0314 	add.w	r3, r4, #20
 8003ba6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003baa:	f109 0314 	add.w	r3, r9, #20
 8003bae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003bb2:	9202      	str	r2, [sp, #8]
 8003bb4:	1b3a      	subs	r2, r7, r4
 8003bb6:	3a15      	subs	r2, #21
 8003bb8:	f022 0203 	bic.w	r2, r2, #3
 8003bbc:	3204      	adds	r2, #4
 8003bbe:	f104 0115 	add.w	r1, r4, #21
 8003bc2:	428f      	cmp	r7, r1
 8003bc4:	bf38      	it	cc
 8003bc6:	2204      	movcc	r2, #4
 8003bc8:	9201      	str	r2, [sp, #4]
 8003bca:	9a02      	ldr	r2, [sp, #8]
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d80c      	bhi.n	8003bec <__multiply+0x9c>
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	dd03      	ble.n	8003bde <__multiply+0x8e>
 8003bd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d059      	beq.n	8003c92 <__multiply+0x142>
 8003bde:	6106      	str	r6, [r0, #16]
 8003be0:	b005      	add	sp, #20
 8003be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be6:	f843 2b04 	str.w	r2, [r3], #4
 8003bea:	e7d8      	b.n	8003b9e <__multiply+0x4e>
 8003bec:	f8b3 a000 	ldrh.w	sl, [r3]
 8003bf0:	f1ba 0f00 	cmp.w	sl, #0
 8003bf4:	d023      	beq.n	8003c3e <__multiply+0xee>
 8003bf6:	46a9      	mov	r9, r5
 8003bf8:	f04f 0c00 	mov.w	ip, #0
 8003bfc:	f104 0e14 	add.w	lr, r4, #20
 8003c00:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003c04:	f8d9 1000 	ldr.w	r1, [r9]
 8003c08:	fa1f fb82 	uxth.w	fp, r2
 8003c0c:	b289      	uxth	r1, r1
 8003c0e:	fb0a 110b 	mla	r1, sl, fp, r1
 8003c12:	4461      	add	r1, ip
 8003c14:	f8d9 c000 	ldr.w	ip, [r9]
 8003c18:	0c12      	lsrs	r2, r2, #16
 8003c1a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003c1e:	fb0a c202 	mla	r2, sl, r2, ip
 8003c22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c26:	b289      	uxth	r1, r1
 8003c28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c2c:	4577      	cmp	r7, lr
 8003c2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003c32:	f849 1b04 	str.w	r1, [r9], #4
 8003c36:	d8e3      	bhi.n	8003c00 <__multiply+0xb0>
 8003c38:	9a01      	ldr	r2, [sp, #4]
 8003c3a:	f845 c002 	str.w	ip, [r5, r2]
 8003c3e:	9a03      	ldr	r2, [sp, #12]
 8003c40:	3304      	adds	r3, #4
 8003c42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c46:	f1b9 0f00 	cmp.w	r9, #0
 8003c4a:	d020      	beq.n	8003c8e <__multiply+0x13e>
 8003c4c:	46ae      	mov	lr, r5
 8003c4e:	f04f 0a00 	mov.w	sl, #0
 8003c52:	6829      	ldr	r1, [r5, #0]
 8003c54:	f104 0c14 	add.w	ip, r4, #20
 8003c58:	f8bc b000 	ldrh.w	fp, [ip]
 8003c5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003c60:	b289      	uxth	r1, r1
 8003c62:	fb09 220b 	mla	r2, r9, fp, r2
 8003c66:	4492      	add	sl, r2
 8003c68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003c6c:	f84e 1b04 	str.w	r1, [lr], #4
 8003c70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003c74:	f8be 1000 	ldrh.w	r1, [lr]
 8003c78:	0c12      	lsrs	r2, r2, #16
 8003c7a:	fb09 1102 	mla	r1, r9, r2, r1
 8003c7e:	4567      	cmp	r7, ip
 8003c80:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003c84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003c88:	d8e6      	bhi.n	8003c58 <__multiply+0x108>
 8003c8a:	9a01      	ldr	r2, [sp, #4]
 8003c8c:	50a9      	str	r1, [r5, r2]
 8003c8e:	3504      	adds	r5, #4
 8003c90:	e79b      	b.n	8003bca <__multiply+0x7a>
 8003c92:	3e01      	subs	r6, #1
 8003c94:	e79d      	b.n	8003bd2 <__multiply+0x82>
 8003c96:	bf00      	nop
 8003c98:	08004c67 	.word	0x08004c67
 8003c9c:	08004cd8 	.word	0x08004cd8

08003ca0 <__pow5mult>:
 8003ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca4:	4615      	mov	r5, r2
 8003ca6:	f012 0203 	ands.w	r2, r2, #3
 8003caa:	4606      	mov	r6, r0
 8003cac:	460f      	mov	r7, r1
 8003cae:	d007      	beq.n	8003cc0 <__pow5mult+0x20>
 8003cb0:	4c25      	ldr	r4, [pc, #148]	; (8003d48 <__pow5mult+0xa8>)
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003cba:	f7ff fe9f 	bl	80039fc <__multadd>
 8003cbe:	4607      	mov	r7, r0
 8003cc0:	10ad      	asrs	r5, r5, #2
 8003cc2:	d03d      	beq.n	8003d40 <__pow5mult+0xa0>
 8003cc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003cc6:	b97c      	cbnz	r4, 8003ce8 <__pow5mult+0x48>
 8003cc8:	2010      	movs	r0, #16
 8003cca:	f7ff fe11 	bl	80038f0 <malloc>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6270      	str	r0, [r6, #36]	; 0x24
 8003cd2:	b928      	cbnz	r0, 8003ce0 <__pow5mult+0x40>
 8003cd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <__pow5mult+0xac>)
 8003cda:	481d      	ldr	r0, [pc, #116]	; (8003d50 <__pow5mult+0xb0>)
 8003cdc:	f000 fd1c 	bl	8004718 <__assert_func>
 8003ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ce4:	6004      	str	r4, [r0, #0]
 8003ce6:	60c4      	str	r4, [r0, #12]
 8003ce8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cf0:	b94c      	cbnz	r4, 8003d06 <__pow5mult+0x66>
 8003cf2:	f240 2171 	movw	r1, #625	; 0x271
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff ff14 	bl	8003b24 <__i2b>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4604      	mov	r4, r0
 8003d00:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d04:	6003      	str	r3, [r0, #0]
 8003d06:	f04f 0900 	mov.w	r9, #0
 8003d0a:	07eb      	lsls	r3, r5, #31
 8003d0c:	d50a      	bpl.n	8003d24 <__pow5mult+0x84>
 8003d0e:	4639      	mov	r1, r7
 8003d10:	4622      	mov	r2, r4
 8003d12:	4630      	mov	r0, r6
 8003d14:	f7ff ff1c 	bl	8003b50 <__multiply>
 8003d18:	4680      	mov	r8, r0
 8003d1a:	4639      	mov	r1, r7
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff fe4b 	bl	80039b8 <_Bfree>
 8003d22:	4647      	mov	r7, r8
 8003d24:	106d      	asrs	r5, r5, #1
 8003d26:	d00b      	beq.n	8003d40 <__pow5mult+0xa0>
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	b938      	cbnz	r0, 8003d3c <__pow5mult+0x9c>
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4630      	mov	r0, r6
 8003d32:	f7ff ff0d 	bl	8003b50 <__multiply>
 8003d36:	6020      	str	r0, [r4, #0]
 8003d38:	f8c0 9000 	str.w	r9, [r0]
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	e7e4      	b.n	8003d0a <__pow5mult+0x6a>
 8003d40:	4638      	mov	r0, r7
 8003d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d46:	bf00      	nop
 8003d48:	08004e28 	.word	0x08004e28
 8003d4c:	08004bf5 	.word	0x08004bf5
 8003d50:	08004cd8 	.word	0x08004cd8

08003d54 <__lshift>:
 8003d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d58:	460c      	mov	r4, r1
 8003d5a:	4607      	mov	r7, r0
 8003d5c:	4691      	mov	r9, r2
 8003d5e:	6923      	ldr	r3, [r4, #16]
 8003d60:	6849      	ldr	r1, [r1, #4]
 8003d62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d6c:	f108 0601 	add.w	r6, r8, #1
 8003d70:	42b3      	cmp	r3, r6
 8003d72:	db0b      	blt.n	8003d8c <__lshift+0x38>
 8003d74:	4638      	mov	r0, r7
 8003d76:	f7ff fddf 	bl	8003938 <_Balloc>
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	b948      	cbnz	r0, 8003d92 <__lshift+0x3e>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <__lshift+0xd8>)
 8003d86:	482a      	ldr	r0, [pc, #168]	; (8003e30 <__lshift+0xdc>)
 8003d88:	f000 fcc6 	bl	8004718 <__assert_func>
 8003d8c:	3101      	adds	r1, #1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	e7ee      	b.n	8003d70 <__lshift+0x1c>
 8003d92:	2300      	movs	r3, #0
 8003d94:	f100 0114 	add.w	r1, r0, #20
 8003d98:	f100 0210 	add.w	r2, r0, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	4553      	cmp	r3, sl
 8003da0:	db37      	blt.n	8003e12 <__lshift+0xbe>
 8003da2:	6920      	ldr	r0, [r4, #16]
 8003da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003da8:	f104 0314 	add.w	r3, r4, #20
 8003dac:	f019 091f 	ands.w	r9, r9, #31
 8003db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003db4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003db8:	d02f      	beq.n	8003e1a <__lshift+0xc6>
 8003dba:	468a      	mov	sl, r1
 8003dbc:	f04f 0c00 	mov.w	ip, #0
 8003dc0:	f1c9 0e20 	rsb	lr, r9, #32
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	fa02 f209 	lsl.w	r2, r2, r9
 8003dca:	ea42 020c 	orr.w	r2, r2, ip
 8003dce:	f84a 2b04 	str.w	r2, [sl], #4
 8003dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dd6:	4298      	cmp	r0, r3
 8003dd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003ddc:	d8f2      	bhi.n	8003dc4 <__lshift+0x70>
 8003dde:	1b03      	subs	r3, r0, r4
 8003de0:	3b15      	subs	r3, #21
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	3304      	adds	r3, #4
 8003de8:	f104 0215 	add.w	r2, r4, #21
 8003dec:	4290      	cmp	r0, r2
 8003dee:	bf38      	it	cc
 8003df0:	2304      	movcc	r3, #4
 8003df2:	f841 c003 	str.w	ip, [r1, r3]
 8003df6:	f1bc 0f00 	cmp.w	ip, #0
 8003dfa:	d001      	beq.n	8003e00 <__lshift+0xac>
 8003dfc:	f108 0602 	add.w	r6, r8, #2
 8003e00:	3e01      	subs	r6, #1
 8003e02:	4638      	mov	r0, r7
 8003e04:	4621      	mov	r1, r4
 8003e06:	612e      	str	r6, [r5, #16]
 8003e08:	f7ff fdd6 	bl	80039b8 <_Bfree>
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8003e16:	3301      	adds	r3, #1
 8003e18:	e7c1      	b.n	8003d9e <__lshift+0x4a>
 8003e1a:	3904      	subs	r1, #4
 8003e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e20:	4298      	cmp	r0, r3
 8003e22:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e26:	d8f9      	bhi.n	8003e1c <__lshift+0xc8>
 8003e28:	e7ea      	b.n	8003e00 <__lshift+0xac>
 8003e2a:	bf00      	nop
 8003e2c:	08004c67 	.word	0x08004c67
 8003e30:	08004cd8 	.word	0x08004cd8

08003e34 <__mcmp>:
 8003e34:	4603      	mov	r3, r0
 8003e36:	690a      	ldr	r2, [r1, #16]
 8003e38:	6900      	ldr	r0, [r0, #16]
 8003e3a:	b530      	push	{r4, r5, lr}
 8003e3c:	1a80      	subs	r0, r0, r2
 8003e3e:	d10d      	bne.n	8003e5c <__mcmp+0x28>
 8003e40:	3314      	adds	r3, #20
 8003e42:	3114      	adds	r1, #20
 8003e44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003e48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003e54:	4295      	cmp	r5, r2
 8003e56:	d002      	beq.n	8003e5e <__mcmp+0x2a>
 8003e58:	d304      	bcc.n	8003e64 <__mcmp+0x30>
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	bd30      	pop	{r4, r5, pc}
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	d3f4      	bcc.n	8003e4c <__mcmp+0x18>
 8003e62:	e7fb      	b.n	8003e5c <__mcmp+0x28>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	e7f8      	b.n	8003e5c <__mcmp+0x28>
	...

08003e6c <__mdiff>:
 8003e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e70:	460d      	mov	r5, r1
 8003e72:	4607      	mov	r7, r0
 8003e74:	4611      	mov	r1, r2
 8003e76:	4628      	mov	r0, r5
 8003e78:	4614      	mov	r4, r2
 8003e7a:	f7ff ffdb 	bl	8003e34 <__mcmp>
 8003e7e:	1e06      	subs	r6, r0, #0
 8003e80:	d111      	bne.n	8003ea6 <__mdiff+0x3a>
 8003e82:	4631      	mov	r1, r6
 8003e84:	4638      	mov	r0, r7
 8003e86:	f7ff fd57 	bl	8003938 <_Balloc>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	b928      	cbnz	r0, 8003e9a <__mdiff+0x2e>
 8003e8e:	f240 2132 	movw	r1, #562	; 0x232
 8003e92:	4b3a      	ldr	r3, [pc, #232]	; (8003f7c <__mdiff+0x110>)
 8003e94:	483a      	ldr	r0, [pc, #232]	; (8003f80 <__mdiff+0x114>)
 8003e96:	f000 fc3f 	bl	8004718 <__assert_func>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea6:	bfa4      	itt	ge
 8003ea8:	4623      	movge	r3, r4
 8003eaa:	462c      	movge	r4, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	6861      	ldr	r1, [r4, #4]
 8003eb0:	bfa6      	itte	ge
 8003eb2:	461d      	movge	r5, r3
 8003eb4:	2600      	movge	r6, #0
 8003eb6:	2601      	movlt	r6, #1
 8003eb8:	f7ff fd3e 	bl	8003938 <_Balloc>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	b918      	cbnz	r0, 8003ec8 <__mdiff+0x5c>
 8003ec0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <__mdiff+0x110>)
 8003ec6:	e7e5      	b.n	8003e94 <__mdiff+0x28>
 8003ec8:	f102 0814 	add.w	r8, r2, #20
 8003ecc:	46c2      	mov	sl, r8
 8003ece:	f04f 0c00 	mov.w	ip, #0
 8003ed2:	6927      	ldr	r7, [r4, #16]
 8003ed4:	60c6      	str	r6, [r0, #12]
 8003ed6:	692e      	ldr	r6, [r5, #16]
 8003ed8:	f104 0014 	add.w	r0, r4, #20
 8003edc:	f105 0914 	add.w	r9, r5, #20
 8003ee0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8003ee4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ee8:	3410      	adds	r4, #16
 8003eea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8003eee:	f859 3b04 	ldr.w	r3, [r9], #4
 8003ef2:	fa1f f18b 	uxth.w	r1, fp
 8003ef6:	448c      	add	ip, r1
 8003ef8:	b299      	uxth	r1, r3
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	ebac 0101 	sub.w	r1, ip, r1
 8003f00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003f04:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003f08:	b289      	uxth	r1, r1
 8003f0a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003f0e:	454e      	cmp	r6, r9
 8003f10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003f14:	f84a 3b04 	str.w	r3, [sl], #4
 8003f18:	d8e7      	bhi.n	8003eea <__mdiff+0x7e>
 8003f1a:	1b73      	subs	r3, r6, r5
 8003f1c:	3b15      	subs	r3, #21
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	3515      	adds	r5, #21
 8003f24:	3304      	adds	r3, #4
 8003f26:	42ae      	cmp	r6, r5
 8003f28:	bf38      	it	cc
 8003f2a:	2304      	movcc	r3, #4
 8003f2c:	4418      	add	r0, r3
 8003f2e:	4443      	add	r3, r8
 8003f30:	461e      	mov	r6, r3
 8003f32:	4605      	mov	r5, r0
 8003f34:	4575      	cmp	r5, lr
 8003f36:	d30e      	bcc.n	8003f56 <__mdiff+0xea>
 8003f38:	f10e 0103 	add.w	r1, lr, #3
 8003f3c:	1a09      	subs	r1, r1, r0
 8003f3e:	f021 0103 	bic.w	r1, r1, #3
 8003f42:	3803      	subs	r0, #3
 8003f44:	4586      	cmp	lr, r0
 8003f46:	bf38      	it	cc
 8003f48:	2100      	movcc	r1, #0
 8003f4a:	4419      	add	r1, r3
 8003f4c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003f50:	b18b      	cbz	r3, 8003f76 <__mdiff+0x10a>
 8003f52:	6117      	str	r7, [r2, #16]
 8003f54:	e7a4      	b.n	8003ea0 <__mdiff+0x34>
 8003f56:	f855 8b04 	ldr.w	r8, [r5], #4
 8003f5a:	fa1f f188 	uxth.w	r1, r8
 8003f5e:	4461      	add	r1, ip
 8003f60:	140c      	asrs	r4, r1, #16
 8003f62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003f66:	b289      	uxth	r1, r1
 8003f68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003f6c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003f70:	f846 1b04 	str.w	r1, [r6], #4
 8003f74:	e7de      	b.n	8003f34 <__mdiff+0xc8>
 8003f76:	3f01      	subs	r7, #1
 8003f78:	e7e8      	b.n	8003f4c <__mdiff+0xe0>
 8003f7a:	bf00      	nop
 8003f7c:	08004c67 	.word	0x08004c67
 8003f80:	08004cd8 	.word	0x08004cd8

08003f84 <__d2b>:
 8003f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003f88:	2101      	movs	r1, #1
 8003f8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003f8e:	4690      	mov	r8, r2
 8003f90:	461d      	mov	r5, r3
 8003f92:	f7ff fcd1 	bl	8003938 <_Balloc>
 8003f96:	4604      	mov	r4, r0
 8003f98:	b930      	cbnz	r0, 8003fa8 <__d2b+0x24>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f240 310a 	movw	r1, #778	; 0x30a
 8003fa0:	4b24      	ldr	r3, [pc, #144]	; (8004034 <__d2b+0xb0>)
 8003fa2:	4825      	ldr	r0, [pc, #148]	; (8004038 <__d2b+0xb4>)
 8003fa4:	f000 fbb8 	bl	8004718 <__assert_func>
 8003fa8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8003fac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8003fb0:	bb2d      	cbnz	r5, 8003ffe <__d2b+0x7a>
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	f1b8 0300 	subs.w	r3, r8, #0
 8003fb8:	d026      	beq.n	8004008 <__d2b+0x84>
 8003fba:	4668      	mov	r0, sp
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f7ff fd83 	bl	8003ac8 <__lo0bits>
 8003fc2:	9900      	ldr	r1, [sp, #0]
 8003fc4:	b1f0      	cbz	r0, 8004004 <__d2b+0x80>
 8003fc6:	9a01      	ldr	r2, [sp, #4]
 8003fc8:	f1c0 0320 	rsb	r3, r0, #32
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	40c2      	lsrs	r2, r0
 8003fd4:	6163      	str	r3, [r4, #20]
 8003fd6:	9201      	str	r2, [sp, #4]
 8003fd8:	9b01      	ldr	r3, [sp, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2102      	movne	r1, #2
 8003fe0:	2101      	moveq	r1, #1
 8003fe2:	61a3      	str	r3, [r4, #24]
 8003fe4:	6121      	str	r1, [r4, #16]
 8003fe6:	b1c5      	cbz	r5, 800401a <__d2b+0x96>
 8003fe8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003fec:	4405      	add	r5, r0
 8003fee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003ff2:	603d      	str	r5, [r7, #0]
 8003ff4:	6030      	str	r0, [r6, #0]
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	b002      	add	sp, #8
 8003ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004002:	e7d6      	b.n	8003fb2 <__d2b+0x2e>
 8004004:	6161      	str	r1, [r4, #20]
 8004006:	e7e7      	b.n	8003fd8 <__d2b+0x54>
 8004008:	a801      	add	r0, sp, #4
 800400a:	f7ff fd5d 	bl	8003ac8 <__lo0bits>
 800400e:	2101      	movs	r1, #1
 8004010:	9b01      	ldr	r3, [sp, #4]
 8004012:	6121      	str	r1, [r4, #16]
 8004014:	6163      	str	r3, [r4, #20]
 8004016:	3020      	adds	r0, #32
 8004018:	e7e5      	b.n	8003fe6 <__d2b+0x62>
 800401a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800401e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004022:	6038      	str	r0, [r7, #0]
 8004024:	6918      	ldr	r0, [r3, #16]
 8004026:	f7ff fd2f 	bl	8003a88 <__hi0bits>
 800402a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800402e:	6031      	str	r1, [r6, #0]
 8004030:	e7e1      	b.n	8003ff6 <__d2b+0x72>
 8004032:	bf00      	nop
 8004034:	08004c67 	.word	0x08004c67
 8004038:	08004cd8 	.word	0x08004cd8

0800403c <_calloc_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	fba1 5402 	umull	r5, r4, r1, r2
 8004042:	b934      	cbnz	r4, 8004052 <_calloc_r+0x16>
 8004044:	4629      	mov	r1, r5
 8004046:	f000 f875 	bl	8004134 <_malloc_r>
 800404a:	4606      	mov	r6, r0
 800404c:	b928      	cbnz	r0, 800405a <_calloc_r+0x1e>
 800404e:	4630      	mov	r0, r6
 8004050:	bd70      	pop	{r4, r5, r6, pc}
 8004052:	220c      	movs	r2, #12
 8004054:	2600      	movs	r6, #0
 8004056:	6002      	str	r2, [r0, #0]
 8004058:	e7f9      	b.n	800404e <_calloc_r+0x12>
 800405a:	462a      	mov	r2, r5
 800405c:	4621      	mov	r1, r4
 800405e:	f7fe f84d 	bl	80020fc <memset>
 8004062:	e7f4      	b.n	800404e <_calloc_r+0x12>

08004064 <_free_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4605      	mov	r5, r0
 8004068:	2900      	cmp	r1, #0
 800406a:	d040      	beq.n	80040ee <_free_r+0x8a>
 800406c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004070:	1f0c      	subs	r4, r1, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfb8      	it	lt
 8004076:	18e4      	addlt	r4, r4, r3
 8004078:	f000 fcd6 	bl	8004a28 <__malloc_lock>
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <_free_r+0x8c>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	b933      	cbnz	r3, 8004090 <_free_r+0x2c>
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6014      	str	r4, [r2, #0]
 8004086:	4628      	mov	r0, r5
 8004088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800408c:	f000 bcd2 	b.w	8004a34 <__malloc_unlock>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d908      	bls.n	80040a6 <_free_r+0x42>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428b      	cmp	r3, r1
 800409a:	bf01      	itttt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	1809      	addeq	r1, r1, r0
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	e7ed      	b.n	8004082 <_free_r+0x1e>
 80040a6:	461a      	mov	r2, r3
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b10b      	cbz	r3, 80040b0 <_free_r+0x4c>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x42>
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	1850      	adds	r0, r2, r1
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x6c>
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	4401      	add	r1, r0
 80040bc:	1850      	adds	r0, r2, r1
 80040be:	4283      	cmp	r3, r0
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	d1e0      	bne.n	8004086 <_free_r+0x22>
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4401      	add	r1, r0
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	6053      	str	r3, [r2, #4]
 80040ce:	e7da      	b.n	8004086 <_free_r+0x22>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x74>
 80040d2:	230c      	movs	r3, #12
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	e7d6      	b.n	8004086 <_free_r+0x22>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf01      	itttt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	1809      	addeq	r1, r1, r0
 80040e6:	6021      	streq	r1, [r4, #0]
 80040e8:	6063      	str	r3, [r4, #4]
 80040ea:	6054      	str	r4, [r2, #4]
 80040ec:	e7cb      	b.n	8004086 <_free_r+0x22>
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000248 	.word	0x20000248

080040f4 <sbrk_aligned>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	4e0e      	ldr	r6, [pc, #56]	; (8004130 <sbrk_aligned+0x3c>)
 80040f8:	460c      	mov	r4, r1
 80040fa:	6831      	ldr	r1, [r6, #0]
 80040fc:	4605      	mov	r5, r0
 80040fe:	b911      	cbnz	r1, 8004106 <sbrk_aligned+0x12>
 8004100:	f000 f9e4 	bl	80044cc <_sbrk_r>
 8004104:	6030      	str	r0, [r6, #0]
 8004106:	4621      	mov	r1, r4
 8004108:	4628      	mov	r0, r5
 800410a:	f000 f9df 	bl	80044cc <_sbrk_r>
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	d00a      	beq.n	8004128 <sbrk_aligned+0x34>
 8004112:	1cc4      	adds	r4, r0, #3
 8004114:	f024 0403 	bic.w	r4, r4, #3
 8004118:	42a0      	cmp	r0, r4
 800411a:	d007      	beq.n	800412c <sbrk_aligned+0x38>
 800411c:	1a21      	subs	r1, r4, r0
 800411e:	4628      	mov	r0, r5
 8004120:	f000 f9d4 	bl	80044cc <_sbrk_r>
 8004124:	3001      	adds	r0, #1
 8004126:	d101      	bne.n	800412c <sbrk_aligned+0x38>
 8004128:	f04f 34ff 	mov.w	r4, #4294967295
 800412c:	4620      	mov	r0, r4
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	2000024c 	.word	0x2000024c

08004134 <_malloc_r>:
 8004134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004138:	1ccd      	adds	r5, r1, #3
 800413a:	f025 0503 	bic.w	r5, r5, #3
 800413e:	3508      	adds	r5, #8
 8004140:	2d0c      	cmp	r5, #12
 8004142:	bf38      	it	cc
 8004144:	250c      	movcc	r5, #12
 8004146:	2d00      	cmp	r5, #0
 8004148:	4607      	mov	r7, r0
 800414a:	db01      	blt.n	8004150 <_malloc_r+0x1c>
 800414c:	42a9      	cmp	r1, r5
 800414e:	d905      	bls.n	800415c <_malloc_r+0x28>
 8004150:	230c      	movs	r3, #12
 8004152:	2600      	movs	r6, #0
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4630      	mov	r0, r6
 8004158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415c:	4e2e      	ldr	r6, [pc, #184]	; (8004218 <_malloc_r+0xe4>)
 800415e:	f000 fc63 	bl	8004a28 <__malloc_lock>
 8004162:	6833      	ldr	r3, [r6, #0]
 8004164:	461c      	mov	r4, r3
 8004166:	bb34      	cbnz	r4, 80041b6 <_malloc_r+0x82>
 8004168:	4629      	mov	r1, r5
 800416a:	4638      	mov	r0, r7
 800416c:	f7ff ffc2 	bl	80040f4 <sbrk_aligned>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	4604      	mov	r4, r0
 8004174:	d14d      	bne.n	8004212 <_malloc_r+0xde>
 8004176:	6834      	ldr	r4, [r6, #0]
 8004178:	4626      	mov	r6, r4
 800417a:	2e00      	cmp	r6, #0
 800417c:	d140      	bne.n	8004200 <_malloc_r+0xcc>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	4631      	mov	r1, r6
 8004182:	4638      	mov	r0, r7
 8004184:	eb04 0803 	add.w	r8, r4, r3
 8004188:	f000 f9a0 	bl	80044cc <_sbrk_r>
 800418c:	4580      	cmp	r8, r0
 800418e:	d13a      	bne.n	8004206 <_malloc_r+0xd2>
 8004190:	6821      	ldr	r1, [r4, #0]
 8004192:	3503      	adds	r5, #3
 8004194:	1a6d      	subs	r5, r5, r1
 8004196:	f025 0503 	bic.w	r5, r5, #3
 800419a:	3508      	adds	r5, #8
 800419c:	2d0c      	cmp	r5, #12
 800419e:	bf38      	it	cc
 80041a0:	250c      	movcc	r5, #12
 80041a2:	4638      	mov	r0, r7
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7ff ffa5 	bl	80040f4 <sbrk_aligned>
 80041aa:	3001      	adds	r0, #1
 80041ac:	d02b      	beq.n	8004206 <_malloc_r+0xd2>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	442b      	add	r3, r5
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	e00e      	b.n	80041d4 <_malloc_r+0xa0>
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	1b52      	subs	r2, r2, r5
 80041ba:	d41e      	bmi.n	80041fa <_malloc_r+0xc6>
 80041bc:	2a0b      	cmp	r2, #11
 80041be:	d916      	bls.n	80041ee <_malloc_r+0xba>
 80041c0:	1961      	adds	r1, r4, r5
 80041c2:	42a3      	cmp	r3, r4
 80041c4:	6025      	str	r5, [r4, #0]
 80041c6:	bf18      	it	ne
 80041c8:	6059      	strne	r1, [r3, #4]
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	bf08      	it	eq
 80041ce:	6031      	streq	r1, [r6, #0]
 80041d0:	5162      	str	r2, [r4, r5]
 80041d2:	604b      	str	r3, [r1, #4]
 80041d4:	4638      	mov	r0, r7
 80041d6:	f104 060b 	add.w	r6, r4, #11
 80041da:	f000 fc2b 	bl	8004a34 <__malloc_unlock>
 80041de:	f026 0607 	bic.w	r6, r6, #7
 80041e2:	1d23      	adds	r3, r4, #4
 80041e4:	1af2      	subs	r2, r6, r3
 80041e6:	d0b6      	beq.n	8004156 <_malloc_r+0x22>
 80041e8:	1b9b      	subs	r3, r3, r6
 80041ea:	50a3      	str	r3, [r4, r2]
 80041ec:	e7b3      	b.n	8004156 <_malloc_r+0x22>
 80041ee:	6862      	ldr	r2, [r4, #4]
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	bf0c      	ite	eq
 80041f4:	6032      	streq	r2, [r6, #0]
 80041f6:	605a      	strne	r2, [r3, #4]
 80041f8:	e7ec      	b.n	80041d4 <_malloc_r+0xa0>
 80041fa:	4623      	mov	r3, r4
 80041fc:	6864      	ldr	r4, [r4, #4]
 80041fe:	e7b2      	b.n	8004166 <_malloc_r+0x32>
 8004200:	4634      	mov	r4, r6
 8004202:	6876      	ldr	r6, [r6, #4]
 8004204:	e7b9      	b.n	800417a <_malloc_r+0x46>
 8004206:	230c      	movs	r3, #12
 8004208:	4638      	mov	r0, r7
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	f000 fc12 	bl	8004a34 <__malloc_unlock>
 8004210:	e7a1      	b.n	8004156 <_malloc_r+0x22>
 8004212:	6025      	str	r5, [r4, #0]
 8004214:	e7de      	b.n	80041d4 <_malloc_r+0xa0>
 8004216:	bf00      	nop
 8004218:	20000248 	.word	0x20000248

0800421c <__sfputc_r>:
 800421c:	6893      	ldr	r3, [r2, #8]
 800421e:	b410      	push	{r4}
 8004220:	3b01      	subs	r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	da07      	bge.n	8004238 <__sfputc_r+0x1c>
 8004228:	6994      	ldr	r4, [r2, #24]
 800422a:	42a3      	cmp	r3, r4
 800422c:	db01      	blt.n	8004232 <__sfputc_r+0x16>
 800422e:	290a      	cmp	r1, #10
 8004230:	d102      	bne.n	8004238 <__sfputc_r+0x1c>
 8004232:	bc10      	pop	{r4}
 8004234:	f000 b99e 	b.w	8004574 <__swbuf_r>
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	1c58      	adds	r0, r3, #1
 800423c:	6010      	str	r0, [r2, #0]
 800423e:	7019      	strb	r1, [r3, #0]
 8004240:	4608      	mov	r0, r1
 8004242:	bc10      	pop	{r4}
 8004244:	4770      	bx	lr

08004246 <__sfputs_r>:
 8004246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004248:	4606      	mov	r6, r0
 800424a:	460f      	mov	r7, r1
 800424c:	4614      	mov	r4, r2
 800424e:	18d5      	adds	r5, r2, r3
 8004250:	42ac      	cmp	r4, r5
 8004252:	d101      	bne.n	8004258 <__sfputs_r+0x12>
 8004254:	2000      	movs	r0, #0
 8004256:	e007      	b.n	8004268 <__sfputs_r+0x22>
 8004258:	463a      	mov	r2, r7
 800425a:	4630      	mov	r0, r6
 800425c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004260:	f7ff ffdc 	bl	800421c <__sfputc_r>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d1f3      	bne.n	8004250 <__sfputs_r+0xa>
 8004268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800426c <_vfiprintf_r>:
 800426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004270:	460d      	mov	r5, r1
 8004272:	4614      	mov	r4, r2
 8004274:	4698      	mov	r8, r3
 8004276:	4606      	mov	r6, r0
 8004278:	b09d      	sub	sp, #116	; 0x74
 800427a:	b118      	cbz	r0, 8004284 <_vfiprintf_r+0x18>
 800427c:	6983      	ldr	r3, [r0, #24]
 800427e:	b90b      	cbnz	r3, 8004284 <_vfiprintf_r+0x18>
 8004280:	f7ff fa90 	bl	80037a4 <__sinit>
 8004284:	4b89      	ldr	r3, [pc, #548]	; (80044ac <_vfiprintf_r+0x240>)
 8004286:	429d      	cmp	r5, r3
 8004288:	d11b      	bne.n	80042c2 <_vfiprintf_r+0x56>
 800428a:	6875      	ldr	r5, [r6, #4]
 800428c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800428e:	07d9      	lsls	r1, r3, #31
 8004290:	d405      	bmi.n	800429e <_vfiprintf_r+0x32>
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	059a      	lsls	r2, r3, #22
 8004296:	d402      	bmi.n	800429e <_vfiprintf_r+0x32>
 8004298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800429a:	f7ff fb26 	bl	80038ea <__retarget_lock_acquire_recursive>
 800429e:	89ab      	ldrh	r3, [r5, #12]
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	d501      	bpl.n	80042a8 <_vfiprintf_r+0x3c>
 80042a4:	692b      	ldr	r3, [r5, #16]
 80042a6:	b9eb      	cbnz	r3, 80042e4 <_vfiprintf_r+0x78>
 80042a8:	4629      	mov	r1, r5
 80042aa:	4630      	mov	r0, r6
 80042ac:	f000 f9c6 	bl	800463c <__swsetup_r>
 80042b0:	b1c0      	cbz	r0, 80042e4 <_vfiprintf_r+0x78>
 80042b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042b4:	07dc      	lsls	r4, r3, #31
 80042b6:	d50e      	bpl.n	80042d6 <_vfiprintf_r+0x6a>
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	b01d      	add	sp, #116	; 0x74
 80042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c2:	4b7b      	ldr	r3, [pc, #492]	; (80044b0 <_vfiprintf_r+0x244>)
 80042c4:	429d      	cmp	r5, r3
 80042c6:	d101      	bne.n	80042cc <_vfiprintf_r+0x60>
 80042c8:	68b5      	ldr	r5, [r6, #8]
 80042ca:	e7df      	b.n	800428c <_vfiprintf_r+0x20>
 80042cc:	4b79      	ldr	r3, [pc, #484]	; (80044b4 <_vfiprintf_r+0x248>)
 80042ce:	429d      	cmp	r5, r3
 80042d0:	bf08      	it	eq
 80042d2:	68f5      	ldreq	r5, [r6, #12]
 80042d4:	e7da      	b.n	800428c <_vfiprintf_r+0x20>
 80042d6:	89ab      	ldrh	r3, [r5, #12]
 80042d8:	0598      	lsls	r0, r3, #22
 80042da:	d4ed      	bmi.n	80042b8 <_vfiprintf_r+0x4c>
 80042dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042de:	f7ff fb05 	bl	80038ec <__retarget_lock_release_recursive>
 80042e2:	e7e9      	b.n	80042b8 <_vfiprintf_r+0x4c>
 80042e4:	2300      	movs	r3, #0
 80042e6:	9309      	str	r3, [sp, #36]	; 0x24
 80042e8:	2320      	movs	r3, #32
 80042ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042ee:	2330      	movs	r3, #48	; 0x30
 80042f0:	f04f 0901 	mov.w	r9, #1
 80042f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80042f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80044b8 <_vfiprintf_r+0x24c>
 80042fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004300:	4623      	mov	r3, r4
 8004302:	469a      	mov	sl, r3
 8004304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004308:	b10a      	cbz	r2, 800430e <_vfiprintf_r+0xa2>
 800430a:	2a25      	cmp	r2, #37	; 0x25
 800430c:	d1f9      	bne.n	8004302 <_vfiprintf_r+0x96>
 800430e:	ebba 0b04 	subs.w	fp, sl, r4
 8004312:	d00b      	beq.n	800432c <_vfiprintf_r+0xc0>
 8004314:	465b      	mov	r3, fp
 8004316:	4622      	mov	r2, r4
 8004318:	4629      	mov	r1, r5
 800431a:	4630      	mov	r0, r6
 800431c:	f7ff ff93 	bl	8004246 <__sfputs_r>
 8004320:	3001      	adds	r0, #1
 8004322:	f000 80aa 	beq.w	800447a <_vfiprintf_r+0x20e>
 8004326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004328:	445a      	add	r2, fp
 800432a:	9209      	str	r2, [sp, #36]	; 0x24
 800432c:	f89a 3000 	ldrb.w	r3, [sl]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a2 	beq.w	800447a <_vfiprintf_r+0x20e>
 8004336:	2300      	movs	r3, #0
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004340:	f10a 0a01 	add.w	sl, sl, #1
 8004344:	9304      	str	r3, [sp, #16]
 8004346:	9307      	str	r3, [sp, #28]
 8004348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800434c:	931a      	str	r3, [sp, #104]	; 0x68
 800434e:	4654      	mov	r4, sl
 8004350:	2205      	movs	r2, #5
 8004352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004356:	4858      	ldr	r0, [pc, #352]	; (80044b8 <_vfiprintf_r+0x24c>)
 8004358:	f7ff fad2 	bl	8003900 <memchr>
 800435c:	9a04      	ldr	r2, [sp, #16]
 800435e:	b9d8      	cbnz	r0, 8004398 <_vfiprintf_r+0x12c>
 8004360:	06d1      	lsls	r1, r2, #27
 8004362:	bf44      	itt	mi
 8004364:	2320      	movmi	r3, #32
 8004366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436a:	0713      	lsls	r3, r2, #28
 800436c:	bf44      	itt	mi
 800436e:	232b      	movmi	r3, #43	; 0x2b
 8004370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004374:	f89a 3000 	ldrb.w	r3, [sl]
 8004378:	2b2a      	cmp	r3, #42	; 0x2a
 800437a:	d015      	beq.n	80043a8 <_vfiprintf_r+0x13c>
 800437c:	4654      	mov	r4, sl
 800437e:	2000      	movs	r0, #0
 8004380:	f04f 0c0a 	mov.w	ip, #10
 8004384:	9a07      	ldr	r2, [sp, #28]
 8004386:	4621      	mov	r1, r4
 8004388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800438c:	3b30      	subs	r3, #48	; 0x30
 800438e:	2b09      	cmp	r3, #9
 8004390:	d94e      	bls.n	8004430 <_vfiprintf_r+0x1c4>
 8004392:	b1b0      	cbz	r0, 80043c2 <_vfiprintf_r+0x156>
 8004394:	9207      	str	r2, [sp, #28]
 8004396:	e014      	b.n	80043c2 <_vfiprintf_r+0x156>
 8004398:	eba0 0308 	sub.w	r3, r0, r8
 800439c:	fa09 f303 	lsl.w	r3, r9, r3
 80043a0:	4313      	orrs	r3, r2
 80043a2:	46a2      	mov	sl, r4
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	e7d2      	b.n	800434e <_vfiprintf_r+0xe2>
 80043a8:	9b03      	ldr	r3, [sp, #12]
 80043aa:	1d19      	adds	r1, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	9103      	str	r1, [sp, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bfbb      	ittet	lt
 80043b4:	425b      	neglt	r3, r3
 80043b6:	f042 0202 	orrlt.w	r2, r2, #2
 80043ba:	9307      	strge	r3, [sp, #28]
 80043bc:	9307      	strlt	r3, [sp, #28]
 80043be:	bfb8      	it	lt
 80043c0:	9204      	strlt	r2, [sp, #16]
 80043c2:	7823      	ldrb	r3, [r4, #0]
 80043c4:	2b2e      	cmp	r3, #46	; 0x2e
 80043c6:	d10c      	bne.n	80043e2 <_vfiprintf_r+0x176>
 80043c8:	7863      	ldrb	r3, [r4, #1]
 80043ca:	2b2a      	cmp	r3, #42	; 0x2a
 80043cc:	d135      	bne.n	800443a <_vfiprintf_r+0x1ce>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	3402      	adds	r4, #2
 80043d2:	1d1a      	adds	r2, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	9203      	str	r2, [sp, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bfb8      	it	lt
 80043dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80043e0:	9305      	str	r3, [sp, #20]
 80043e2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80044bc <_vfiprintf_r+0x250>
 80043e6:	2203      	movs	r2, #3
 80043e8:	4650      	mov	r0, sl
 80043ea:	7821      	ldrb	r1, [r4, #0]
 80043ec:	f7ff fa88 	bl	8003900 <memchr>
 80043f0:	b140      	cbz	r0, 8004404 <_vfiprintf_r+0x198>
 80043f2:	2340      	movs	r3, #64	; 0x40
 80043f4:	eba0 000a 	sub.w	r0, r0, sl
 80043f8:	fa03 f000 	lsl.w	r0, r3, r0
 80043fc:	9b04      	ldr	r3, [sp, #16]
 80043fe:	3401      	adds	r4, #1
 8004400:	4303      	orrs	r3, r0
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004408:	2206      	movs	r2, #6
 800440a:	482d      	ldr	r0, [pc, #180]	; (80044c0 <_vfiprintf_r+0x254>)
 800440c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004410:	f7ff fa76 	bl	8003900 <memchr>
 8004414:	2800      	cmp	r0, #0
 8004416:	d03f      	beq.n	8004498 <_vfiprintf_r+0x22c>
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <_vfiprintf_r+0x258>)
 800441a:	bb1b      	cbnz	r3, 8004464 <_vfiprintf_r+0x1f8>
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	3307      	adds	r3, #7
 8004420:	f023 0307 	bic.w	r3, r3, #7
 8004424:	3308      	adds	r3, #8
 8004426:	9303      	str	r3, [sp, #12]
 8004428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442a:	443b      	add	r3, r7
 800442c:	9309      	str	r3, [sp, #36]	; 0x24
 800442e:	e767      	b.n	8004300 <_vfiprintf_r+0x94>
 8004430:	460c      	mov	r4, r1
 8004432:	2001      	movs	r0, #1
 8004434:	fb0c 3202 	mla	r2, ip, r2, r3
 8004438:	e7a5      	b.n	8004386 <_vfiprintf_r+0x11a>
 800443a:	2300      	movs	r3, #0
 800443c:	f04f 0c0a 	mov.w	ip, #10
 8004440:	4619      	mov	r1, r3
 8004442:	3401      	adds	r4, #1
 8004444:	9305      	str	r3, [sp, #20]
 8004446:	4620      	mov	r0, r4
 8004448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800444c:	3a30      	subs	r2, #48	; 0x30
 800444e:	2a09      	cmp	r2, #9
 8004450:	d903      	bls.n	800445a <_vfiprintf_r+0x1ee>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0c5      	beq.n	80043e2 <_vfiprintf_r+0x176>
 8004456:	9105      	str	r1, [sp, #20]
 8004458:	e7c3      	b.n	80043e2 <_vfiprintf_r+0x176>
 800445a:	4604      	mov	r4, r0
 800445c:	2301      	movs	r3, #1
 800445e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004462:	e7f0      	b.n	8004446 <_vfiprintf_r+0x1da>
 8004464:	ab03      	add	r3, sp, #12
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	462a      	mov	r2, r5
 800446a:	4630      	mov	r0, r6
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <_vfiprintf_r+0x25c>)
 800446e:	a904      	add	r1, sp, #16
 8004470:	f7fd feea 	bl	8002248 <_printf_float>
 8004474:	4607      	mov	r7, r0
 8004476:	1c78      	adds	r0, r7, #1
 8004478:	d1d6      	bne.n	8004428 <_vfiprintf_r+0x1bc>
 800447a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800447c:	07d9      	lsls	r1, r3, #31
 800447e:	d405      	bmi.n	800448c <_vfiprintf_r+0x220>
 8004480:	89ab      	ldrh	r3, [r5, #12]
 8004482:	059a      	lsls	r2, r3, #22
 8004484:	d402      	bmi.n	800448c <_vfiprintf_r+0x220>
 8004486:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004488:	f7ff fa30 	bl	80038ec <__retarget_lock_release_recursive>
 800448c:	89ab      	ldrh	r3, [r5, #12]
 800448e:	065b      	lsls	r3, r3, #25
 8004490:	f53f af12 	bmi.w	80042b8 <_vfiprintf_r+0x4c>
 8004494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004496:	e711      	b.n	80042bc <_vfiprintf_r+0x50>
 8004498:	ab03      	add	r3, sp, #12
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	462a      	mov	r2, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <_vfiprintf_r+0x25c>)
 80044a2:	a904      	add	r1, sp, #16
 80044a4:	f7fe f96c 	bl	8002780 <_printf_i>
 80044a8:	e7e4      	b.n	8004474 <_vfiprintf_r+0x208>
 80044aa:	bf00      	nop
 80044ac:	08004c98 	.word	0x08004c98
 80044b0:	08004cb8 	.word	0x08004cb8
 80044b4:	08004c78 	.word	0x08004c78
 80044b8:	08004e34 	.word	0x08004e34
 80044bc:	08004e3a 	.word	0x08004e3a
 80044c0:	08004e3e 	.word	0x08004e3e
 80044c4:	08002249 	.word	0x08002249
 80044c8:	08004247 	.word	0x08004247

080044cc <_sbrk_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	2300      	movs	r3, #0
 80044d0:	4d05      	ldr	r5, [pc, #20]	; (80044e8 <_sbrk_r+0x1c>)
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	f7fc fcc4 	bl	8000e64 <_sbrk>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_sbrk_r+0x1a>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_sbrk_r+0x1a>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20000250 	.word	0x20000250

080044ec <__sread>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	460c      	mov	r4, r1
 80044f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f4:	f000 faa4 	bl	8004a40 <_read_r>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	bfab      	itete	ge
 80044fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004500:	181b      	addge	r3, r3, r0
 8004502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004506:	bfac      	ite	ge
 8004508:	6563      	strge	r3, [r4, #84]	; 0x54
 800450a:	81a3      	strhlt	r3, [r4, #12]
 800450c:	bd10      	pop	{r4, pc}

0800450e <__swrite>:
 800450e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004512:	461f      	mov	r7, r3
 8004514:	898b      	ldrh	r3, [r1, #12]
 8004516:	4605      	mov	r5, r0
 8004518:	05db      	lsls	r3, r3, #23
 800451a:	460c      	mov	r4, r1
 800451c:	4616      	mov	r6, r2
 800451e:	d505      	bpl.n	800452c <__swrite+0x1e>
 8004520:	2302      	movs	r3, #2
 8004522:	2200      	movs	r2, #0
 8004524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004528:	f000 f9f4 	bl	8004914 <_lseek_r>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	4632      	mov	r2, r6
 8004530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	4628      	mov	r0, r5
 8004538:	463b      	mov	r3, r7
 800453a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004542:	f000 b869 	b.w	8004618 <_write_r>

08004546 <__sseek>:
 8004546:	b510      	push	{r4, lr}
 8004548:	460c      	mov	r4, r1
 800454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454e:	f000 f9e1 	bl	8004914 <_lseek_r>
 8004552:	1c43      	adds	r3, r0, #1
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	bf15      	itete	ne
 8004558:	6560      	strne	r0, [r4, #84]	; 0x54
 800455a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800455e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004562:	81a3      	strheq	r3, [r4, #12]
 8004564:	bf18      	it	ne
 8004566:	81a3      	strhne	r3, [r4, #12]
 8004568:	bd10      	pop	{r4, pc}

0800456a <__sclose>:
 800456a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456e:	f000 b8f1 	b.w	8004754 <_close_r>
	...

08004574 <__swbuf_r>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	460e      	mov	r6, r1
 8004578:	4614      	mov	r4, r2
 800457a:	4605      	mov	r5, r0
 800457c:	b118      	cbz	r0, 8004586 <__swbuf_r+0x12>
 800457e:	6983      	ldr	r3, [r0, #24]
 8004580:	b90b      	cbnz	r3, 8004586 <__swbuf_r+0x12>
 8004582:	f7ff f90f 	bl	80037a4 <__sinit>
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <__swbuf_r+0x98>)
 8004588:	429c      	cmp	r4, r3
 800458a:	d12b      	bne.n	80045e4 <__swbuf_r+0x70>
 800458c:	686c      	ldr	r4, [r5, #4]
 800458e:	69a3      	ldr	r3, [r4, #24]
 8004590:	60a3      	str	r3, [r4, #8]
 8004592:	89a3      	ldrh	r3, [r4, #12]
 8004594:	071a      	lsls	r2, r3, #28
 8004596:	d52f      	bpl.n	80045f8 <__swbuf_r+0x84>
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	b36b      	cbz	r3, 80045f8 <__swbuf_r+0x84>
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	b2f6      	uxtb	r6, r6
 80045a2:	1ac0      	subs	r0, r0, r3
 80045a4:	6963      	ldr	r3, [r4, #20]
 80045a6:	4637      	mov	r7, r6
 80045a8:	4283      	cmp	r3, r0
 80045aa:	dc04      	bgt.n	80045b6 <__swbuf_r+0x42>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f962 	bl	8004878 <_fflush_r>
 80045b4:	bb30      	cbnz	r0, 8004604 <__swbuf_r+0x90>
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	3001      	adds	r0, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	60a3      	str	r3, [r4, #8]
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	6022      	str	r2, [r4, #0]
 80045c4:	701e      	strb	r6, [r3, #0]
 80045c6:	6963      	ldr	r3, [r4, #20]
 80045c8:	4283      	cmp	r3, r0
 80045ca:	d004      	beq.n	80045d6 <__swbuf_r+0x62>
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	07db      	lsls	r3, r3, #31
 80045d0:	d506      	bpl.n	80045e0 <__swbuf_r+0x6c>
 80045d2:	2e0a      	cmp	r6, #10
 80045d4:	d104      	bne.n	80045e0 <__swbuf_r+0x6c>
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f94d 	bl	8004878 <_fflush_r>
 80045de:	b988      	cbnz	r0, 8004604 <__swbuf_r+0x90>
 80045e0:	4638      	mov	r0, r7
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <__swbuf_r+0x9c>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d101      	bne.n	80045ee <__swbuf_r+0x7a>
 80045ea:	68ac      	ldr	r4, [r5, #8]
 80045ec:	e7cf      	b.n	800458e <__swbuf_r+0x1a>
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <__swbuf_r+0xa0>)
 80045f0:	429c      	cmp	r4, r3
 80045f2:	bf08      	it	eq
 80045f4:	68ec      	ldreq	r4, [r5, #12]
 80045f6:	e7ca      	b.n	800458e <__swbuf_r+0x1a>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 f81e 	bl	800463c <__swsetup_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	d0cb      	beq.n	800459c <__swbuf_r+0x28>
 8004604:	f04f 37ff 	mov.w	r7, #4294967295
 8004608:	e7ea      	b.n	80045e0 <__swbuf_r+0x6c>
 800460a:	bf00      	nop
 800460c:	08004c98 	.word	0x08004c98
 8004610:	08004cb8 	.word	0x08004cb8
 8004614:	08004c78 	.word	0x08004c78

08004618 <_write_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	2200      	movs	r2, #0
 8004622:	4d05      	ldr	r5, [pc, #20]	; (8004638 <_write_r+0x20>)
 8004624:	602a      	str	r2, [r5, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	f7fc fbcf 	bl	8000dca <_write>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_write_r+0x1e>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_write_r+0x1e>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	20000250 	.word	0x20000250

0800463c <__swsetup_r>:
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <__swsetup_r+0xcc>)
 800463e:	b570      	push	{r4, r5, r6, lr}
 8004640:	681d      	ldr	r5, [r3, #0]
 8004642:	4606      	mov	r6, r0
 8004644:	460c      	mov	r4, r1
 8004646:	b125      	cbz	r5, 8004652 <__swsetup_r+0x16>
 8004648:	69ab      	ldr	r3, [r5, #24]
 800464a:	b913      	cbnz	r3, 8004652 <__swsetup_r+0x16>
 800464c:	4628      	mov	r0, r5
 800464e:	f7ff f8a9 	bl	80037a4 <__sinit>
 8004652:	4b2e      	ldr	r3, [pc, #184]	; (800470c <__swsetup_r+0xd0>)
 8004654:	429c      	cmp	r4, r3
 8004656:	d10f      	bne.n	8004678 <__swsetup_r+0x3c>
 8004658:	686c      	ldr	r4, [r5, #4]
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004660:	0719      	lsls	r1, r3, #28
 8004662:	d42c      	bmi.n	80046be <__swsetup_r+0x82>
 8004664:	06dd      	lsls	r5, r3, #27
 8004666:	d411      	bmi.n	800468c <__swsetup_r+0x50>
 8004668:	2309      	movs	r3, #9
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	e03e      	b.n	80046f6 <__swsetup_r+0xba>
 8004678:	4b25      	ldr	r3, [pc, #148]	; (8004710 <__swsetup_r+0xd4>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d101      	bne.n	8004682 <__swsetup_r+0x46>
 800467e:	68ac      	ldr	r4, [r5, #8]
 8004680:	e7eb      	b.n	800465a <__swsetup_r+0x1e>
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <__swsetup_r+0xd8>)
 8004684:	429c      	cmp	r4, r3
 8004686:	bf08      	it	eq
 8004688:	68ec      	ldreq	r4, [r5, #12]
 800468a:	e7e6      	b.n	800465a <__swsetup_r+0x1e>
 800468c:	0758      	lsls	r0, r3, #29
 800468e:	d512      	bpl.n	80046b6 <__swsetup_r+0x7a>
 8004690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004692:	b141      	cbz	r1, 80046a6 <__swsetup_r+0x6a>
 8004694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004698:	4299      	cmp	r1, r3
 800469a:	d002      	beq.n	80046a2 <__swsetup_r+0x66>
 800469c:	4630      	mov	r0, r6
 800469e:	f7ff fce1 	bl	8004064 <_free_r>
 80046a2:	2300      	movs	r3, #0
 80046a4:	6363      	str	r3, [r4, #52]	; 0x34
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6063      	str	r3, [r4, #4]
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f043 0308 	orr.w	r3, r3, #8
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	b94b      	cbnz	r3, 80046d6 <__swsetup_r+0x9a>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d003      	beq.n	80046d6 <__swsetup_r+0x9a>
 80046ce:	4621      	mov	r1, r4
 80046d0:	4630      	mov	r0, r6
 80046d2:	f000 f957 	bl	8004984 <__smakebuf_r>
 80046d6:	89a0      	ldrh	r0, [r4, #12]
 80046d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046dc:	f010 0301 	ands.w	r3, r0, #1
 80046e0:	d00a      	beq.n	80046f8 <__swsetup_r+0xbc>
 80046e2:	2300      	movs	r3, #0
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	6963      	ldr	r3, [r4, #20]
 80046e8:	425b      	negs	r3, r3
 80046ea:	61a3      	str	r3, [r4, #24]
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	b943      	cbnz	r3, 8004702 <__swsetup_r+0xc6>
 80046f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046f4:	d1ba      	bne.n	800466c <__swsetup_r+0x30>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	0781      	lsls	r1, r0, #30
 80046fa:	bf58      	it	pl
 80046fc:	6963      	ldrpl	r3, [r4, #20]
 80046fe:	60a3      	str	r3, [r4, #8]
 8004700:	e7f4      	b.n	80046ec <__swsetup_r+0xb0>
 8004702:	2000      	movs	r0, #0
 8004704:	e7f7      	b.n	80046f6 <__swsetup_r+0xba>
 8004706:	bf00      	nop
 8004708:	2000000c 	.word	0x2000000c
 800470c:	08004c98 	.word	0x08004c98
 8004710:	08004cb8 	.word	0x08004cb8
 8004714:	08004c78 	.word	0x08004c78

08004718 <__assert_func>:
 8004718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800471a:	4614      	mov	r4, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <__assert_func+0x2c>)
 8004720:	4605      	mov	r5, r0
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68d8      	ldr	r0, [r3, #12]
 8004726:	b14c      	cbz	r4, 800473c <__assert_func+0x24>
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <__assert_func+0x30>)
 800472a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800472e:	9100      	str	r1, [sp, #0]
 8004730:	462b      	mov	r3, r5
 8004732:	4906      	ldr	r1, [pc, #24]	; (800474c <__assert_func+0x34>)
 8004734:	f000 f8dc 	bl	80048f0 <fiprintf>
 8004738:	f000 f9a1 	bl	8004a7e <abort>
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <__assert_func+0x38>)
 800473e:	461c      	mov	r4, r3
 8004740:	e7f3      	b.n	800472a <__assert_func+0x12>
 8004742:	bf00      	nop
 8004744:	2000000c 	.word	0x2000000c
 8004748:	08004e45 	.word	0x08004e45
 800474c:	08004e52 	.word	0x08004e52
 8004750:	08004e80 	.word	0x08004e80

08004754 <_close_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	2300      	movs	r3, #0
 8004758:	4d05      	ldr	r5, [pc, #20]	; (8004770 <_close_r+0x1c>)
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	f7fc fb4f 	bl	8000e02 <_close>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_close_r+0x1a>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_close_r+0x1a>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	20000250 	.word	0x20000250

08004774 <__sflush_r>:
 8004774:	898a      	ldrh	r2, [r1, #12]
 8004776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004778:	4605      	mov	r5, r0
 800477a:	0710      	lsls	r0, r2, #28
 800477c:	460c      	mov	r4, r1
 800477e:	d457      	bmi.n	8004830 <__sflush_r+0xbc>
 8004780:	684b      	ldr	r3, [r1, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dc04      	bgt.n	8004790 <__sflush_r+0x1c>
 8004786:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	dc01      	bgt.n	8004790 <__sflush_r+0x1c>
 800478c:	2000      	movs	r0, #0
 800478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004792:	2e00      	cmp	r6, #0
 8004794:	d0fa      	beq.n	800478c <__sflush_r+0x18>
 8004796:	2300      	movs	r3, #0
 8004798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800479c:	682f      	ldr	r7, [r5, #0]
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	d032      	beq.n	8004808 <__sflush_r+0x94>
 80047a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	075a      	lsls	r2, r3, #29
 80047a8:	d505      	bpl.n	80047b6 <__sflush_r+0x42>
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	1ac0      	subs	r0, r0, r3
 80047ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047b0:	b10b      	cbz	r3, 80047b6 <__sflush_r+0x42>
 80047b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047b4:	1ac0      	subs	r0, r0, r3
 80047b6:	2300      	movs	r3, #0
 80047b8:	4602      	mov	r2, r0
 80047ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047bc:	4628      	mov	r0, r5
 80047be:	6a21      	ldr	r1, [r4, #32]
 80047c0:	47b0      	blx	r6
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	d106      	bne.n	80047d6 <__sflush_r+0x62>
 80047c8:	6829      	ldr	r1, [r5, #0]
 80047ca:	291d      	cmp	r1, #29
 80047cc:	d82c      	bhi.n	8004828 <__sflush_r+0xb4>
 80047ce:	4a29      	ldr	r2, [pc, #164]	; (8004874 <__sflush_r+0x100>)
 80047d0:	40ca      	lsrs	r2, r1
 80047d2:	07d6      	lsls	r6, r2, #31
 80047d4:	d528      	bpl.n	8004828 <__sflush_r+0xb4>
 80047d6:	2200      	movs	r2, #0
 80047d8:	6062      	str	r2, [r4, #4]
 80047da:	6922      	ldr	r2, [r4, #16]
 80047dc:	04d9      	lsls	r1, r3, #19
 80047de:	6022      	str	r2, [r4, #0]
 80047e0:	d504      	bpl.n	80047ec <__sflush_r+0x78>
 80047e2:	1c42      	adds	r2, r0, #1
 80047e4:	d101      	bne.n	80047ea <__sflush_r+0x76>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	b903      	cbnz	r3, 80047ec <__sflush_r+0x78>
 80047ea:	6560      	str	r0, [r4, #84]	; 0x54
 80047ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ee:	602f      	str	r7, [r5, #0]
 80047f0:	2900      	cmp	r1, #0
 80047f2:	d0cb      	beq.n	800478c <__sflush_r+0x18>
 80047f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <__sflush_r+0x8e>
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7ff fc31 	bl	8004064 <_free_r>
 8004802:	2000      	movs	r0, #0
 8004804:	6360      	str	r0, [r4, #52]	; 0x34
 8004806:	e7c2      	b.n	800478e <__sflush_r+0x1a>
 8004808:	6a21      	ldr	r1, [r4, #32]
 800480a:	2301      	movs	r3, #1
 800480c:	4628      	mov	r0, r5
 800480e:	47b0      	blx	r6
 8004810:	1c41      	adds	r1, r0, #1
 8004812:	d1c7      	bne.n	80047a4 <__sflush_r+0x30>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0c4      	beq.n	80047a4 <__sflush_r+0x30>
 800481a:	2b1d      	cmp	r3, #29
 800481c:	d001      	beq.n	8004822 <__sflush_r+0xae>
 800481e:	2b16      	cmp	r3, #22
 8004820:	d101      	bne.n	8004826 <__sflush_r+0xb2>
 8004822:	602f      	str	r7, [r5, #0]
 8004824:	e7b2      	b.n	800478c <__sflush_r+0x18>
 8004826:	89a3      	ldrh	r3, [r4, #12]
 8004828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	e7ae      	b.n	800478e <__sflush_r+0x1a>
 8004830:	690f      	ldr	r7, [r1, #16]
 8004832:	2f00      	cmp	r7, #0
 8004834:	d0aa      	beq.n	800478c <__sflush_r+0x18>
 8004836:	0793      	lsls	r3, r2, #30
 8004838:	bf18      	it	ne
 800483a:	2300      	movne	r3, #0
 800483c:	680e      	ldr	r6, [r1, #0]
 800483e:	bf08      	it	eq
 8004840:	694b      	ldreq	r3, [r1, #20]
 8004842:	1bf6      	subs	r6, r6, r7
 8004844:	600f      	str	r7, [r1, #0]
 8004846:	608b      	str	r3, [r1, #8]
 8004848:	2e00      	cmp	r6, #0
 800484a:	dd9f      	ble.n	800478c <__sflush_r+0x18>
 800484c:	4633      	mov	r3, r6
 800484e:	463a      	mov	r2, r7
 8004850:	4628      	mov	r0, r5
 8004852:	6a21      	ldr	r1, [r4, #32]
 8004854:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004858:	47e0      	blx	ip
 800485a:	2800      	cmp	r0, #0
 800485c:	dc06      	bgt.n	800486c <__sflush_r+0xf8>
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	e790      	b.n	800478e <__sflush_r+0x1a>
 800486c:	4407      	add	r7, r0
 800486e:	1a36      	subs	r6, r6, r0
 8004870:	e7ea      	b.n	8004848 <__sflush_r+0xd4>
 8004872:	bf00      	nop
 8004874:	20400001 	.word	0x20400001

08004878 <_fflush_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	4605      	mov	r5, r0
 800487e:	460c      	mov	r4, r1
 8004880:	b913      	cbnz	r3, 8004888 <_fflush_r+0x10>
 8004882:	2500      	movs	r5, #0
 8004884:	4628      	mov	r0, r5
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	b118      	cbz	r0, 8004892 <_fflush_r+0x1a>
 800488a:	6983      	ldr	r3, [r0, #24]
 800488c:	b90b      	cbnz	r3, 8004892 <_fflush_r+0x1a>
 800488e:	f7fe ff89 	bl	80037a4 <__sinit>
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <_fflush_r+0x6c>)
 8004894:	429c      	cmp	r4, r3
 8004896:	d11b      	bne.n	80048d0 <_fflush_r+0x58>
 8004898:	686c      	ldr	r4, [r5, #4]
 800489a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ef      	beq.n	8004882 <_fflush_r+0xa>
 80048a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048a4:	07d0      	lsls	r0, r2, #31
 80048a6:	d404      	bmi.n	80048b2 <_fflush_r+0x3a>
 80048a8:	0599      	lsls	r1, r3, #22
 80048aa:	d402      	bmi.n	80048b2 <_fflush_r+0x3a>
 80048ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ae:	f7ff f81c 	bl	80038ea <__retarget_lock_acquire_recursive>
 80048b2:	4628      	mov	r0, r5
 80048b4:	4621      	mov	r1, r4
 80048b6:	f7ff ff5d 	bl	8004774 <__sflush_r>
 80048ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048bc:	4605      	mov	r5, r0
 80048be:	07da      	lsls	r2, r3, #31
 80048c0:	d4e0      	bmi.n	8004884 <_fflush_r+0xc>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	059b      	lsls	r3, r3, #22
 80048c6:	d4dd      	bmi.n	8004884 <_fflush_r+0xc>
 80048c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ca:	f7ff f80f 	bl	80038ec <__retarget_lock_release_recursive>
 80048ce:	e7d9      	b.n	8004884 <_fflush_r+0xc>
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <_fflush_r+0x70>)
 80048d2:	429c      	cmp	r4, r3
 80048d4:	d101      	bne.n	80048da <_fflush_r+0x62>
 80048d6:	68ac      	ldr	r4, [r5, #8]
 80048d8:	e7df      	b.n	800489a <_fflush_r+0x22>
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <_fflush_r+0x74>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	bf08      	it	eq
 80048e0:	68ec      	ldreq	r4, [r5, #12]
 80048e2:	e7da      	b.n	800489a <_fflush_r+0x22>
 80048e4:	08004c98 	.word	0x08004c98
 80048e8:	08004cb8 	.word	0x08004cb8
 80048ec:	08004c78 	.word	0x08004c78

080048f0 <fiprintf>:
 80048f0:	b40e      	push	{r1, r2, r3}
 80048f2:	b503      	push	{r0, r1, lr}
 80048f4:	4601      	mov	r1, r0
 80048f6:	ab03      	add	r3, sp, #12
 80048f8:	4805      	ldr	r0, [pc, #20]	; (8004910 <fiprintf+0x20>)
 80048fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80048fe:	6800      	ldr	r0, [r0, #0]
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	f7ff fcb3 	bl	800426c <_vfiprintf_r>
 8004906:	b002      	add	sp, #8
 8004908:	f85d eb04 	ldr.w	lr, [sp], #4
 800490c:	b003      	add	sp, #12
 800490e:	4770      	bx	lr
 8004910:	2000000c 	.word	0x2000000c

08004914 <_lseek_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	2200      	movs	r2, #0
 800491e:	4d05      	ldr	r5, [pc, #20]	; (8004934 <_lseek_r+0x20>)
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc fa91 	bl	8000e4a <_lseek>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_lseek_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_lseek_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000250 	.word	0x20000250

08004938 <__swhatbuf_r>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	460e      	mov	r6, r1
 800493c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004940:	4614      	mov	r4, r2
 8004942:	2900      	cmp	r1, #0
 8004944:	461d      	mov	r5, r3
 8004946:	b096      	sub	sp, #88	; 0x58
 8004948:	da08      	bge.n	800495c <__swhatbuf_r+0x24>
 800494a:	2200      	movs	r2, #0
 800494c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	061a      	lsls	r2, r3, #24
 8004954:	d410      	bmi.n	8004978 <__swhatbuf_r+0x40>
 8004956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495a:	e00e      	b.n	800497a <__swhatbuf_r+0x42>
 800495c:	466a      	mov	r2, sp
 800495e:	f000 f895 	bl	8004a8c <_fstat_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	dbf1      	blt.n	800494a <__swhatbuf_r+0x12>
 8004966:	9a01      	ldr	r2, [sp, #4]
 8004968:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800496c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004970:	425a      	negs	r2, r3
 8004972:	415a      	adcs	r2, r3
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	e7ee      	b.n	8004956 <__swhatbuf_r+0x1e>
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	2000      	movs	r0, #0
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	b016      	add	sp, #88	; 0x58
 8004980:	bd70      	pop	{r4, r5, r6, pc}
	...

08004984 <__smakebuf_r>:
 8004984:	898b      	ldrh	r3, [r1, #12]
 8004986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004988:	079d      	lsls	r5, r3, #30
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	d507      	bpl.n	80049a0 <__smakebuf_r+0x1c>
 8004990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2301      	movs	r3, #1
 800499a:	6163      	str	r3, [r4, #20]
 800499c:	b002      	add	sp, #8
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	466a      	mov	r2, sp
 80049a2:	ab01      	add	r3, sp, #4
 80049a4:	f7ff ffc8 	bl	8004938 <__swhatbuf_r>
 80049a8:	9900      	ldr	r1, [sp, #0]
 80049aa:	4605      	mov	r5, r0
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff fbc1 	bl	8004134 <_malloc_r>
 80049b2:	b948      	cbnz	r0, 80049c8 <__smakebuf_r+0x44>
 80049b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d4ef      	bmi.n	800499c <__smakebuf_r+0x18>
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	e7e3      	b.n	8004990 <__smakebuf_r+0xc>
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <__smakebuf_r+0x7c>)
 80049ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	6120      	str	r0, [r4, #16]
 80049da:	6163      	str	r3, [r4, #20]
 80049dc:	9b01      	ldr	r3, [sp, #4]
 80049de:	b15b      	cbz	r3, 80049f8 <__smakebuf_r+0x74>
 80049e0:	4630      	mov	r0, r6
 80049e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e6:	f000 f863 	bl	8004ab0 <_isatty_r>
 80049ea:	b128      	cbz	r0, 80049f8 <__smakebuf_r+0x74>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	89a0      	ldrh	r0, [r4, #12]
 80049fa:	4305      	orrs	r5, r0
 80049fc:	81a5      	strh	r5, [r4, #12]
 80049fe:	e7cd      	b.n	800499c <__smakebuf_r+0x18>
 8004a00:	0800373d 	.word	0x0800373d

08004a04 <__ascii_mbtowc>:
 8004a04:	b082      	sub	sp, #8
 8004a06:	b901      	cbnz	r1, 8004a0a <__ascii_mbtowc+0x6>
 8004a08:	a901      	add	r1, sp, #4
 8004a0a:	b142      	cbz	r2, 8004a1e <__ascii_mbtowc+0x1a>
 8004a0c:	b14b      	cbz	r3, 8004a22 <__ascii_mbtowc+0x1e>
 8004a0e:	7813      	ldrb	r3, [r2, #0]
 8004a10:	600b      	str	r3, [r1, #0]
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	1e10      	subs	r0, r2, #0
 8004a16:	bf18      	it	ne
 8004a18:	2001      	movne	r0, #1
 8004a1a:	b002      	add	sp, #8
 8004a1c:	4770      	bx	lr
 8004a1e:	4610      	mov	r0, r2
 8004a20:	e7fb      	b.n	8004a1a <__ascii_mbtowc+0x16>
 8004a22:	f06f 0001 	mvn.w	r0, #1
 8004a26:	e7f8      	b.n	8004a1a <__ascii_mbtowc+0x16>

08004a28 <__malloc_lock>:
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <__malloc_lock+0x8>)
 8004a2a:	f7fe bf5e 	b.w	80038ea <__retarget_lock_acquire_recursive>
 8004a2e:	bf00      	nop
 8004a30:	20000244 	.word	0x20000244

08004a34 <__malloc_unlock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <__malloc_unlock+0x8>)
 8004a36:	f7fe bf59 	b.w	80038ec <__retarget_lock_release_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	20000244 	.word	0x20000244

08004a40 <_read_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4d05      	ldr	r5, [pc, #20]	; (8004a60 <_read_r+0x20>)
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7fc f99e 	bl	8000d90 <_read>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_read_r+0x1e>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_read_r+0x1e>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000250 	.word	0x20000250

08004a64 <__ascii_wctomb>:
 8004a64:	4603      	mov	r3, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	b141      	cbz	r1, 8004a7c <__ascii_wctomb+0x18>
 8004a6a:	2aff      	cmp	r2, #255	; 0xff
 8004a6c:	d904      	bls.n	8004a78 <__ascii_wctomb+0x14>
 8004a6e:	228a      	movs	r2, #138	; 0x8a
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	4770      	bx	lr
 8004a78:	2001      	movs	r0, #1
 8004a7a:	700a      	strb	r2, [r1, #0]
 8004a7c:	4770      	bx	lr

08004a7e <abort>:
 8004a7e:	2006      	movs	r0, #6
 8004a80:	b508      	push	{r3, lr}
 8004a82:	f000 f84d 	bl	8004b20 <raise>
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7fc f978 	bl	8000d7c <_exit>

08004a8c <_fstat_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	2300      	movs	r3, #0
 8004a90:	4d06      	ldr	r5, [pc, #24]	; (8004aac <_fstat_r+0x20>)
 8004a92:	4604      	mov	r4, r0
 8004a94:	4608      	mov	r0, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	602b      	str	r3, [r5, #0]
 8004a9a:	f7fc f9bd 	bl	8000e18 <_fstat>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	d102      	bne.n	8004aa8 <_fstat_r+0x1c>
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	b103      	cbz	r3, 8004aa8 <_fstat_r+0x1c>
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000250 	.word	0x20000250

08004ab0 <_isatty_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4d05      	ldr	r5, [pc, #20]	; (8004acc <_isatty_r+0x1c>)
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	f7fc f9bb 	bl	8000e36 <_isatty>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_isatty_r+0x1a>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_isatty_r+0x1a>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	20000250 	.word	0x20000250

08004ad0 <_raise_r>:
 8004ad0:	291f      	cmp	r1, #31
 8004ad2:	b538      	push	{r3, r4, r5, lr}
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	d904      	bls.n	8004ae4 <_raise_r+0x14>
 8004ada:	2316      	movs	r3, #22
 8004adc:	6003      	str	r3, [r0, #0]
 8004ade:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ae6:	b112      	cbz	r2, 8004aee <_raise_r+0x1e>
 8004ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004aec:	b94b      	cbnz	r3, 8004b02 <_raise_r+0x32>
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f830 	bl	8004b54 <_getpid_r>
 8004af4:	462a      	mov	r2, r5
 8004af6:	4601      	mov	r1, r0
 8004af8:	4620      	mov	r0, r4
 8004afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004afe:	f000 b817 	b.w	8004b30 <_kill_r>
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d00a      	beq.n	8004b1c <_raise_r+0x4c>
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	d103      	bne.n	8004b12 <_raise_r+0x42>
 8004b0a:	2316      	movs	r3, #22
 8004b0c:	6003      	str	r3, [r0, #0]
 8004b0e:	2001      	movs	r0, #1
 8004b10:	e7e7      	b.n	8004ae2 <_raise_r+0x12>
 8004b12:	2400      	movs	r4, #0
 8004b14:	4628      	mov	r0, r5
 8004b16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b1a:	4798      	blx	r3
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	e7e0      	b.n	8004ae2 <_raise_r+0x12>

08004b20 <raise>:
 8004b20:	4b02      	ldr	r3, [pc, #8]	; (8004b2c <raise+0xc>)
 8004b22:	4601      	mov	r1, r0
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	f7ff bfd3 	b.w	8004ad0 <_raise_r>
 8004b2a:	bf00      	nop
 8004b2c:	2000000c 	.word	0x2000000c

08004b30 <_kill_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	2300      	movs	r3, #0
 8004b34:	4d06      	ldr	r5, [pc, #24]	; (8004b50 <_kill_r+0x20>)
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	f7fc f90d 	bl	8000d5c <_kill>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d102      	bne.n	8004b4c <_kill_r+0x1c>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	b103      	cbz	r3, 8004b4c <_kill_r+0x1c>
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000250 	.word	0x20000250

08004b54 <_getpid_r>:
 8004b54:	f7fc b8fb 	b.w	8000d4e <_getpid>

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
